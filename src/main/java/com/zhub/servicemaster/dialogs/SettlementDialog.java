/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zhub.servicemaster.dialogs;

import com.zhub.servicemaster.accounts.PostAccounts;
import com.zhub.servicemaster.data.SystemData;
import com.zhub.servicemaster.forms.MainFrame;
import com.zhub.servicemaster.functions.PrintFunctions;
import com.zhub.servicemaster.functions.StockFunctions;
import com.zhub.servicemaster.guiFunctions.ButtonFunctions;
import com.zhub.servicemaster.keys.KeyCodeFunctions;
import com.zhub.servicemaster.listners.PaymentButtonActionListners;
import com.zhub.servicemaster.listners.PaymentButtonMouseListners;
import com.zhub.servicemaster.models.Account;
import com.zhub.servicemaster.models.BusinessPartner;
import com.zhub.servicemaster.models.Invoice;
import com.zhub.servicemaster.models.Payment;
import com.zhub.servicemaster.models.PaymentType;
import com.zhub.servicemaster.models.Sale;
import com.zhub.servicemaster.models.SaleStatus;
import com.zhub.servicemaster.models.SubAccount;
import com.zhub.servicemaster.panel.CashSettlePanel;
import com.zhub.servicemaster.panel.ChequeSettlePanel;
import com.zhub.servicemaster.panel.CreditCardSettlePanel;
import com.zhub.servicemaster.panel.CreditSettlePanel;
import com.zhub.servicemaster.utils.HibernateUtil;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author RuwanM
 */
public class SettlementDialog extends javax.swing.JDialog {

    private Sale sale;
    private Invoice invoice;
    private final String customerName;

    /**
     * Creates new form PaymentDialog
     *
     * @param parent
     * @param modal
     * @param sale
     * @param invoice
     * @param customerName
     */
    public SettlementDialog(java.awt.Frame parent, boolean modal, Sale sale, Invoice invoice, String customerName) {
        super(parent, modal);
        initComponents();

        this.sale = sale;
        this.invoice = invoice;
        this.customerName = customerName;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        panelToolBar = new javax.swing.JPanel();
        panelWindow = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        btnSettle = new javax.swing.JButton();
        cbxUpdateDatabase = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        panelToolBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));
        toolBar.add(panelToolBar);

        panelWindow.setLayout(new java.awt.BorderLayout());

        btnClose.setBackground(new java.awt.Color(150, 255, 150));
        btnClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnClose.setContentAreaFilled(false);
        btnClose.setOpaque(true);
        btnClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCloseMouseExited(evt);
            }
        });
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnSettle.setBackground(new java.awt.Color(150, 255, 150));
        btnSettle.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnSettle.setText("Settle");
        btnSettle.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnSettle.setContentAreaFilled(false);
        btnSettle.setOpaque(true);
        btnSettle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSettleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSettleMouseExited(evt);
            }
        });
        btnSettle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettleActionPerformed(evt);
            }
        });

        cbxUpdateDatabase.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxUpdateDatabase.setSelected(true);
        cbxUpdateDatabase.setText("Update");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(cbxUpdateDatabase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(panelWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelWindow, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxUpdateDatabase))
                .addContainerGap())
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSettle, cbxUpdateDatabase});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.getRootPane().setBorder(BorderFactory.createLineBorder(SystemData.BORDER_COLOR, 2));

        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        sale = (Sale) session.load(Sale.class, sale.getSaleCode());

        if (invoice == null) {
            KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
            String invoiceCode;
            if (cbxUpdateDatabase.isSelected()) {
                invoiceCode = keyCodeFunctions.getKey("INV", "Invoices");
            } else {
                invoiceCode = keyCodeFunctions.getKey("DIN", "Dummy Invoices");
            }
            Date date = new Date();

            SaleStatus saleStatus = (SaleStatus) session
                    .createCriteria(SaleStatus.class)
                    .add(Restrictions.eq("statusDescription", "INVOICED"))
                    .uniqueResult();

            invoice = new Invoice(invoiceCode, sale);
            invoice.setCreatedDate(date);
            invoice.setCreatedTime(date);
            invoice.setCreatedUser(MainFrame.user.getUserId());

            session.saveOrUpdate(invoice);

            Set invoices = new HashSet();
            invoices.add(invoice);

            sale.setInvoices(invoices);
            sale.setSaleStatus(saleStatus);

            session.saveOrUpdate(sale);
        }

        List<PaymentType> paymentTypes = session
                .createCriteria(PaymentType.class)
                .addOrder(Order.asc("paymentTypeCode"))
                .list();
        if (paymentTypes.isEmpty()) {
            InformationDialog.showMessageBox("No payment type available", "Unavailable", null);
        } else {
            panelToolBar.removeAll();
            for (PaymentType paymentType : paymentTypes) {
                String text = paymentType.getPaymentTypeName();
                String name = paymentType.getPaymentTypeCode();

                JButton button = new JButton(text);
                button.setName(name);
                button.setPreferredSize(new Dimension(90, 35));
                button.setBackground(SystemData.MOUSE_EXIT_COLOR);
                button.setForeground(Color.BLACK);
                button.setHorizontalAlignment(SwingConstants.CENTER);
                Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 12);
                button.setFont(font);
                button.setBorder(BorderFactory.createMatteBorder(1, 1, 1, 1, SystemData.BORDER_COLOR));
                button.setContentAreaFilled(false);
                button.setOpaque(true);
                panelToolBar.add(button);

                button.addMouseListener(new PaymentButtonMouseListners());
                button.addActionListener(new PaymentButtonActionListners(this, sale, invoice));
            }
            panelToolBar.revalidate();
            panelToolBar.repaint();
        }

        transaction.commit();
        session.close();
    }//GEN-LAST:event_formWindowOpened

    private void btnSettleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettleMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnSettleMouseEntered

    private void btnSettleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettleMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnSettleMouseExited

    private void btnSettleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettleActionPerformed
        if (panelFrame instanceof CashSettlePanel) { // Cash settlement
            if (this.validateCash()) {
                Date date = new Date();
                CashSettlePanel cashSettlePanel = (CashSettlePanel) panelFrame;
                float nowPayingAmount = Float.parseFloat(cashSettlePanel.txtNowPaying.getText());
                float balanceAmount = Float.parseFloat(cashSettlePanel.txtBalance.getText());

                KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                String paymentCode = keyCodeFunctions.getKey("PAY", "Payment");

                Session session = HibernateUtil.getSessionFactory().openSession();
                Transaction transaction = session.beginTransaction();

                sale = (Sale) session.load(Sale.class, sale.getSaleCode());

                Payment payment = new Payment(paymentCode, invoice, new PaymentType(cashSettlePanel.getPaymentTypeCode()));

                float payingAmount;
                if (balanceAmount < 0) {
                    payment.setAmount(nowPayingAmount);
                    SaleStatus saleStatus = (SaleStatus) session
                            .createCriteria(SaleStatus.class)
                            .add(Restrictions.eq("statusDescription", "PARTIALLY PAID"))
                            .uniqueResult();
                    sale.setSaleStatus(saleStatus);
                    payingAmount = nowPayingAmount;
                } else {
                    payment.setAmount(nowPayingAmount - balanceAmount);
                    SaleStatus saleStatus = (SaleStatus) session
                            .createCriteria(SaleStatus.class)
                            .add(Restrictions.eq("statusDescription", "PAID"))
                            .uniqueResult();
                    sale.setSaleStatus(saleStatus);
                    sale.setPreviousMilage(sale.getCurrentMilage());
                    payingAmount = (nowPayingAmount - balanceAmount);
                }
                payment.setCreatedDate(date);
                payment.setCreatedTime(date);
                payment.setCreatedUser(MainFrame.user.getUserId());

                session.saveOrUpdate(payment);

                session.saveOrUpdate(sale);

                InformationDialog.showMessageBox("Playment done successfully", "Success", null);
                panelWindow.removeAll();

                final CashSettlePanel settlePanel = new CashSettlePanel(this, "PTY1000");
                this.panelFrame = settlePanel;
                this.panelWindow.add(this.panelFrame);
                this.panelWindow.revalidate();
                this.panelWindow.repaint();
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        settlePanel.txtNowPaying.requestFocus();
                    }
                });

                Query query = session.createQuery("from Payment p where p.invoice = :inv order by p.paymentCode");
                query.setParameter("inv", this.invoice);

                List list = query.list();
                if (list.isEmpty()) {
                    settlePanel.txtTotalAmount.setText("" + sale.getGrandTotal());
                    settlePanel.txtRemainingBalance.setText("" + sale.getGrandTotal());
                } else {
                    float paidAmount = 0.0f;
                    for (Object tempPayment : list) {
                        if (tempPayment instanceof Payment) {
                            Payment tPayment = (Payment) tempPayment;
                            paidAmount += tPayment.getAmount();
                        }
                    }
                    settlePanel.txtTotalAmount.setText("" + sale.getGrandTotal());
                    settlePanel.txtPaidAmount.setText("" + paidAmount);
                    settlePanel.txtRemainingBalance.setText("" + (sale.getGrandTotal() - paidAmount));

                    if (sale.getGrandTotal() - paidAmount <= 0.0f) {
                        this.btnSettle.setEnabled(false);
                    }
                }

                Account debitAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1002"))
                        .uniqueResult();

                Account creditAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1001"))
                        .uniqueResult();

                transaction.commit();
                session.close();

                PostAccounts accountPosting = new PostAccounts();
                accountPosting.cashDebitPosting(debitAccount, invoice, "Cash settlemnt for " + sale.getSaleCode(), payingAmount);
                accountPosting.cashCreditPosting(creditAccount, invoice, "Cash settlemnt for " + sale.getSaleCode(), payingAmount);

                StockFunctions stockFunctions = new StockFunctions();
                stockFunctions.reduceSaledStoke(sale.getSaleCode());
            } else {
                InformationDialog.showMessageBox("Please enter valid details", "Invalid", null);
            }
        } else if (panelFrame instanceof ChequeSettlePanel) { // Cheque settlement
            if (this.validateCheque()) {
                Date date = new Date();
                ChequeSettlePanel chequeSettlePanel = (ChequeSettlePanel) panelFrame;
                float nowPayingAmount = Float.parseFloat(chequeSettlePanel.txtNowPaying.getText());
                float balanceAmount = Float.parseFloat(chequeSettlePanel.txtBalance.getText());
                String chequeNumber = chequeSettlePanel.txtChequeNumber.getText().trim();
                Date chequeDate = chequeSettlePanel.dateChequeDate.getDate();
                String customer = chequeSettlePanel.cmbCustomer.getSelectedItem().toString();
                int creditDays = 0;

                if (date != chequeDate) {
                    long lToday = date.getTime();
                    long lCheckDate = chequeDate.getTime();

                    long differece = lCheckDate - lToday;

                    creditDays = (int) TimeUnit.DAYS.convert(differece, TimeUnit.MILLISECONDS);
                }

                KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                String paymentCode = keyCodeFunctions.getKey("SET", "Settlement");

                Session session = HibernateUtil.getSessionFactory().openSession();
                Transaction transaction = session.beginTransaction();

                sale = (Sale) session.load(Sale.class, sale.getSaleCode());

                String customerCode = chequeSettlePanel.customerMap.get(customer);

                BusinessPartner businessPartner = (BusinessPartner) session
                        .createCriteria(BusinessPartner.class)
                        .add(Restrictions.eq("businessPartnerCode", customerCode))
                        .uniqueResult();

                Payment payment = new Payment(paymentCode, invoice, new PaymentType(chequeSettlePanel.getPaymentTypeCode()));
                if (balanceAmount < 0) {
                    payment.setAmount(nowPayingAmount);

                    SaleStatus saleStatus = (SaleStatus) session
                            .createCriteria(SaleStatus.class)
                            .add(Restrictions.eq("statusDescription", "PARTIALLY SETTLED"))
                            .uniqueResult();
                    sale.setSaleStatus(saleStatus);
                } else {
                    payment.setAmount(nowPayingAmount - balanceAmount);
                    SaleStatus saleStatus = (SaleStatus) session
                            .createCriteria(SaleStatus.class)
                            .add(Restrictions.eq("statusDescription", "SETTLED"))
                            .uniqueResult();
                    sale.setSaleStatus(saleStatus);
                    sale.setPreviousMilage(sale.getCurrentMilage());
                }
                payment.setCreatedDate(date);
                payment.setCreatedTime(date);
                payment.setCreatedUser(MainFrame.user.getUserId());
                payment.setRemark("Cheque number " + chequeNumber + ". Date " + SystemData.DATE_FORMAT.format(chequeDate));

                session.saveOrUpdate(payment);

                session.saveOrUpdate(sale);

                InformationDialog.showMessageBox("Playment done successfully", "Success", null);
                panelWindow.removeAll();

                final ChequeSettlePanel settlePanel = new ChequeSettlePanel(this, "PTY1001");
                this.panelFrame = settlePanel;
                this.panelWindow.add(this.panelFrame);
                this.panelWindow.revalidate();
                this.panelWindow.repaint();
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        settlePanel.txtNowPaying.requestFocus();
                    }
                });

                List<Payment> payments = session
                        .createCriteria(Payment.class)
                        .add(Restrictions.eq("invoice", this.invoice))
                        .add(Restrictions.like("paymentCode", "SET%"))
                        .addOrder(Order.asc("paymentCode"))
                        .list();

                if (payments.isEmpty()) {
                    settlePanel.txtTotalAmount.setText("" + sale.getGrandTotal());
                    settlePanel.txtRemainingBalance.setText("" + sale.getGrandTotal());
                } else {
                    float paidAmount = 0.0f;
                    for (Payment tempPayment : payments) {
                        paidAmount += tempPayment.getAmount();
                    }
                    settlePanel.txtTotalAmount.setText("" + sale.getGrandTotal());
                    settlePanel.txtPaidAmount.setText("" + paidAmount);
                    settlePanel.txtRemainingBalance.setText("" + (sale.getGrandTotal() - paidAmount));

                    if (sale.getGrandTotal() - paidAmount <= 0.0f) {
                        this.btnSettle.setEnabled(false);
                    }
                }

                Account deptorAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("businessPartner", businessPartner))
                        .add(Restrictions.eq("subAccount", session.load(SubAccount.class, "SAC1002")))
                        .uniqueResult();

                Account saleAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1001"))
                        .uniqueResult();

                Account cihAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1004"))
                        .uniqueResult();

                Account uarAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1006"))
                        .uniqueResult();

                transaction.commit();
                session.close();

                PostAccounts accountPosting = new PostAccounts();
                accountPosting.chequeDebitPosting(deptorAccount, businessPartner, invoice, 0, chequeDate, creditDays, chequeNumber, paymentCode);
                accountPosting.chequeCreditPosting(saleAccount, businessPartner, invoice, 0, chequeDate, creditDays, chequeNumber, paymentCode);
                accountPosting.chequeDebitPosting(cihAccount, businessPartner, invoice, 0, chequeDate, creditDays, chequeNumber, "Cheque settlemnt for " + sale.getSaleCode());
                accountPosting.chequeCreditPosting(uarAccount, businessPartner, invoice, 0, chequeDate, creditDays, chequeNumber, "Cheque settlemnt for " + sale.getSaleCode());

                StockFunctions stockFunctions = new StockFunctions();
                stockFunctions.reduceSaledStoke(sale.getSaleCode());
            } else {
                InformationDialog.showMessageBox("Please enter valid details", "Invalid", null);
            }
        } else if (panelFrame instanceof CreditSettlePanel) { // Credit settlement
            if (this.validateCredit()) {
                Date date = new Date();
                CreditSettlePanel creditSettlePanel = (CreditSettlePanel) panelFrame;
                float nowPayingAmount = Float.parseFloat(creditSettlePanel.txtNowPaying.getText());
                float balanceAmount = Float.parseFloat(creditSettlePanel.txtBalance.getText());
                String creditDays = creditSettlePanel.txtCreditDays.getText().trim();
                String dueDate = creditSettlePanel.txtDueDate.getText().trim();
                String customer = creditSettlePanel.cmbCustomer.getSelectedItem().toString();

                KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                String paymentCode = keyCodeFunctions.getKey("SET", "Settlement");

                String customerCode = creditSettlePanel.customerMap.get(customer);

                Session session = HibernateUtil.getSessionFactory().openSession();
                Transaction transaction = session.beginTransaction();

                sale = (Sale) session.load(Sale.class, sale.getSaleCode());

                BusinessPartner businessPartner = (BusinessPartner) session
                        .createCriteria(BusinessPartner.class)
                        .add(Restrictions.eq("businessPartnerCode", customerCode))
                        .uniqueResult();

                Payment payment = new Payment(paymentCode, invoice, new PaymentType(creditSettlePanel.getPaymentTypeCode()));
                if (balanceAmount < 0) {
                    payment.setAmount(nowPayingAmount);

                    SaleStatus saleStatus = (SaleStatus) session
                            .createCriteria(SaleStatus.class)
                            .add(Restrictions.eq("statusDescription", "PARTIALLY SETTLED"))
                            .uniqueResult();
                    sale.setSaleStatus(saleStatus);
                } else {
                    payment.setAmount(nowPayingAmount - balanceAmount);
                    SaleStatus saleStatus = (SaleStatus) session
                            .createCriteria(SaleStatus.class)
                            .add(Restrictions.eq("statusDescription", "SETTLED"))
                            .uniqueResult();
                    sale.setSaleStatus(saleStatus);
                    sale.setPreviousMilage(sale.getCurrentMilage());
                }
                payment.setCreatedDate(date);
                payment.setCreatedTime(date);
                payment.setCreatedUser(MainFrame.user.getUserId());
                payment.setRemark("Number of credit days : " + creditDays + ". Due Date : " + dueDate);

                session.saveOrUpdate(payment);

                session.saveOrUpdate(sale);

                InformationDialog.showMessageBox("Playment done successfully", "Success", null);
                panelWindow.removeAll();

                final CreditSettlePanel settlePanel = new CreditSettlePanel(this, "PTY1002");
                this.panelFrame = settlePanel;
                this.panelWindow.add(this.panelFrame);
                this.panelWindow.revalidate();
                this.panelWindow.repaint();
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        settlePanel.txtNowPaying.requestFocus();
                    }
                });

                List<Payment> payments = session
                        .createCriteria(Payment.class)
                        .add(Restrictions.eq("invoice", this.invoice))
                        .add(Restrictions.like("paymentCode", "SET%"))
                        .addOrder(Order.asc("paymentCode"))
                        .list();

                if (payments.isEmpty()) {
                    settlePanel.txtTotalAmount.setText("" + sale.getGrandTotal());
                    settlePanel.txtRemainingBalance.setText("" + sale.getGrandTotal());
                } else {
                    float paidAmount = 0.0f;
                    for (Payment tempPayment : payments) {
                        paidAmount += tempPayment.getAmount();
                    }
                    settlePanel.txtTotalAmount.setText("" + sale.getGrandTotal());
                    settlePanel.txtPaidAmount.setText("" + paidAmount);
                    settlePanel.txtRemainingBalance.setText("" + (sale.getGrandTotal() - paidAmount));

                    if (sale.getGrandTotal() - paidAmount <= 0.0f) {
                        this.btnSettle.setEnabled(false);
                    }
                }

                Account debitAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("businessPartner", businessPartner))
                        .add(Restrictions.eq("subAccount", session.load(SubAccount.class, "SAC1002")))
                        .uniqueResult();

                Account creditAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1001"))
                        .uniqueResult();

                transaction.commit();
                session.close();

                PostAccounts accountPosting = new PostAccounts();
                accountPosting.creditDebitPosting(debitAccount, businessPartner, invoice, Integer.parseInt(creditDays), "Credit settlemnt for " + sale.getSaleCode());
                accountPosting.creditCreditPosting(creditAccount, businessPartner, invoice, Integer.parseInt(creditDays), "Credit settlemnt for " + sale.getSaleCode());

                StockFunctions stockFunctions = new StockFunctions();
                stockFunctions.reduceSaledStoke(sale.getSaleCode());
            } else {
                InformationDialog.showMessageBox("Please enter valid details", "Invalid", null);
            }
        } else if (panelFrame instanceof CreditCardSettlePanel) { // Credit card settlement
            if (this.validateCreditCard()) {
                Date date = new Date();
                CreditCardSettlePanel creditCardSettlePanel = (CreditCardSettlePanel) panelFrame;
                float nowPayingAmount = Float.parseFloat(creditCardSettlePanel.txtNowPaying.getText());
                float balanceAmount = Float.parseFloat(creditCardSettlePanel.txtBalance.getText());
                String bank = creditCardSettlePanel.cmbBank.getSelectedItem().toString().trim();
                String cardType = creditCardSettlePanel.cmbCardType.getSelectedItem().toString().trim();
                String cardNumber = creditCardSettlePanel.txtCardNumber.getText().trim();
                Date expireDate = creditCardSettlePanel.dateExpireDate.getDate();

                KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                String paymentCode = keyCodeFunctions.getKey("SET", "Settlement");

                Session session = HibernateUtil.getSessionFactory().openSession();
                Transaction transaction = session.beginTransaction();

                sale = (Sale) session.load(Sale.class, sale.getSaleCode());

                Payment payment = new Payment(paymentCode, invoice, new PaymentType(creditCardSettlePanel.getPaymentTypeCode()));
                if (balanceAmount < 0) {
                    payment.setAmount(nowPayingAmount);

                    SaleStatus saleStatus = (SaleStatus) session
                            .createCriteria(SaleStatus.class)
                            .add(Restrictions.eq("statusDescription", "PARTIALLY SETTLED"))
                            .uniqueResult();
                    sale.setSaleStatus(saleStatus);
                } else {
                    payment.setAmount(nowPayingAmount - balanceAmount);
                    SaleStatus saleStatus = (SaleStatus) session
                            .createCriteria(SaleStatus.class)
                            .add(Restrictions.eq("statusDescription", "SETTLED"))
                            .uniqueResult();
                    sale.setSaleStatus(saleStatus);
                    sale.setPreviousMilage(sale.getCurrentMilage());
                }
                payment.setCreatedDate(date);
                payment.setCreatedTime(date);
                payment.setCreatedUser(MainFrame.user.getUserId());
                payment.setRemark(bank + "-" + cardType + "-" + cardNumber + "-" + SystemData.DATE_FORMAT.format(expireDate));

                session.saveOrUpdate(payment);

                session.saveOrUpdate(sale);

                InformationDialog.showMessageBox("Playment done successfully", "Success", null);
                panelWindow.removeAll();

                final CreditCardSettlePanel settlePanel = new CreditCardSettlePanel(this, "PTY1003");
                this.panelFrame = settlePanel;
                this.panelWindow.add(this.panelFrame);
                this.panelWindow.revalidate();
                this.panelWindow.repaint();
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        settlePanel.txtNowPaying.requestFocus();
                    }
                });

                List<Payment> payments = session
                        .createCriteria(Payment.class)
                        .add(Restrictions.eq("invoice", this.invoice))
                        .add(Restrictions.like("paymentCode", "SET%"))
                        .addOrder(Order.asc("paymentCode"))
                        .list();

                if (payments.isEmpty()) {
                    settlePanel.txtTotalAmount.setText("" + sale.getGrandTotal());
                    settlePanel.txtRemainingBalance.setText("" + sale.getGrandTotal());
                } else {
                    float paidAmount = 0.0f;
                    for (Payment tempPayment : payments) {
                        paidAmount += tempPayment.getAmount();
                    }
                    settlePanel.txtTotalAmount.setText("" + sale.getGrandTotal());
                    settlePanel.txtPaidAmount.setText("" + paidAmount);
                    settlePanel.txtRemainingBalance.setText("" + (sale.getGrandTotal() - paidAmount));

                    if (sale.getGrandTotal() - paidAmount <= 0.0f) {
                        this.btnSettle.setEnabled(false);
                    }
                }

                Account debitAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1003"))
                        .uniqueResult();

                Account creditAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1001"))
                        .uniqueResult();

                transaction.commit();
                session.close();

                PostAccounts accountPosting = new PostAccounts();
                accountPosting.creditCardDebitPosting(debitAccount, invoice, cardNumber, expireDate, bank, cardType, "Credit card settlemet for " + sale.getSaleCode());
                accountPosting.creditCardCreditPosting(creditAccount, invoice, cardNumber, expireDate, bank, cardType, "Credit card settlemet for " + sale.getSaleCode());

                StockFunctions stockFunctions = new StockFunctions();
                stockFunctions.reduceSaledStoke(sale.getSaleCode());
            } else {
                InformationDialog.showMessageBox("Please enter valid details", "Invalid", null);
            }
        }

        this.printInvoice();
    }//GEN-LAST:event_btnSettleActionPerformed

    private void btnCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCloseMouseEntered

    private void btnCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCloseMouseExited

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void printInvoice() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        this.sale = (Sale) session.load(Sale.class, this.sale.getSaleCode());

        Set invoices = this.sale.getInvoices();
        if (invoices == null || invoices.isEmpty()) {
            KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
            String invoiceCode;
            if (cbxUpdateDatabase.isSelected()) {
                invoiceCode = keyCodeFunctions.getKey("INV", "Invoices");
            } else {
                invoiceCode = keyCodeFunctions.getKey("DIN", "Dummy Invoices");
            }
            Date date = new Date();

            SaleStatus saleStatus = (SaleStatus) session
                    .createCriteria(SaleStatus.class)
                    .add(Restrictions.eq("statusDescription", "INVOICED"))
                    .uniqueResult();

            invoice = new Invoice(invoiceCode, sale);
            invoice.setCreatedDate(date);
            invoice.setCreatedTime(date);
            invoice.setCreatedUser(MainFrame.user.getUserId());

            session.saveOrUpdate(invoice);

            invoices = new HashSet();
            invoices.add(invoice);

            sale.setInvoices(invoices);
            sale.setSaleStatus(saleStatus);

            session.saveOrUpdate(sale);
        }

        transaction.commit();
        session.close();

        ConfirmationDialog.showMessageBox("Do you want to print the invoice?", "Print", null);
        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
            PrintFunctions printFunctions = new PrintFunctions();

            if (customerName.equalsIgnoreCase("cash")) {
                printFunctions.printInvoice(this.sale.getSaleCode(), true);
            } else {
                printFunctions.printInvoice(this.sale.getSaleCode(), false);
            }
        }
    }

    private boolean validateCash() {
        if (panelFrame instanceof CashSettlePanel) {
            CashSettlePanel cashSettlePanel = (CashSettlePanel) panelFrame;
            float nowPaying = Float.parseFloat(cashSettlePanel.txtNowPaying.getText().trim());
            return !(nowPaying == 0.0f);
        }
        return false;
    }

    private boolean validateCheque() {
        if (panelFrame instanceof ChequeSettlePanel) {
            ChequeSettlePanel chequeSettlePanel = (ChequeSettlePanel) panelFrame;
            float nowPaying = Float.parseFloat(chequeSettlePanel.txtNowPaying.getText().trim());
            String customer = chequeSettlePanel.cmbCustomer.getSelectedItem().toString().trim();
            String chequeNumber = chequeSettlePanel.txtChequeNumber.getText().trim();
            String bank = chequeSettlePanel.cmbBank.getSelectedItem().toString().trim();
            String bankAccount = chequeSettlePanel.cmbBankAccount.getSelectedItem().toString().trim();
            return !(nowPaying == 0.0f
                    || customer.isEmpty()
                    || chequeNumber.isEmpty()
                    || bank.isEmpty()
                    || bankAccount.isEmpty());
        }
        return false;
    }

    private boolean validateCredit() {
        if (panelFrame instanceof CreditSettlePanel) {
            CreditSettlePanel creditSettlePanel = (CreditSettlePanel) panelFrame;
            float nowPaying = Float.parseFloat(creditSettlePanel.txtNowPaying.getText().trim());
            String customer = creditSettlePanel.cmbCustomer.getSelectedItem().toString().trim();
            String creditDays = creditSettlePanel.txtCreditDays.getText().trim();
            return !(nowPaying == 0.0f || customer.isEmpty() || creditDays.isEmpty() || creditDays.equalsIgnoreCase("0"));
        }
        return false;
    }

    private boolean validateCreditCard() {
        if (panelFrame instanceof CreditCardSettlePanel) {
            CreditCardSettlePanel creditCardSettlePanel = (CreditCardSettlePanel) panelFrame;
            float nowPaying = Float.parseFloat(creditCardSettlePanel.txtNowPaying.getText().trim());
            return !(nowPaying == 0.0f);
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    public javax.swing.JButton btnSettle;
    private javax.swing.JCheckBox cbxUpdateDatabase;
    private javax.swing.JPanel mainPanel;
    public javax.swing.JPanel panelToolBar;
    public javax.swing.JPanel panelWindow;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    public JPanel panelFrame;
}
