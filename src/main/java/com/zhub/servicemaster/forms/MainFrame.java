/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zhub.servicemaster.forms;

import com.zhub.servicemaster.data.SystemData;
import com.zhub.servicemaster.dialogs.ConfirmationDialog;
import com.zhub.servicemaster.dialogs.InformationDialog;
import com.zhub.servicemaster.guiFunctions.ButtonFunctions;
import com.zhub.servicemaster.internalFrames.AccountsFrame;
import com.zhub.servicemaster.internalFrames.BillSetoffFrame;
import com.zhub.servicemaster.internalFrames.BomFrame;
import com.zhub.servicemaster.internalFrames.BusinessPartnerFrame;
import com.zhub.servicemaster.internalFrames.CategoryFrame;
import com.zhub.servicemaster.internalFrames.ChequeReceipt;
import com.zhub.servicemaster.internalFrames.DirectSaleFrame;
import com.zhub.servicemaster.internalFrames.GrnFrame;
import com.zhub.servicemaster.internalFrames.ItemFrame;
import com.zhub.servicemaster.internalFrames.ItemReturnFrame;
import com.zhub.servicemaster.internalFrames.ItemTypeFrame;
import com.zhub.servicemaster.internalFrames.LocationFrame;
import com.zhub.servicemaster.internalFrames.PrinterFrame;
import com.zhub.servicemaster.internalFrames.RackSlotFrame;
import com.zhub.servicemaster.internalFrames.RacksFrame;
import com.zhub.servicemaster.internalFrames.SaleHistoryFrame;
import com.zhub.servicemaster.internalFrames.ServicesFrame;
import com.zhub.servicemaster.internalFrames.ShortCutsFrame;
import com.zhub.servicemaster.internalFrames.StorageFrame;
import com.zhub.servicemaster.internalFrames.SubCategoryFrame;
import com.zhub.servicemaster.internalFrames.VehicleFrame;
import com.zhub.servicemaster.internalFrames.VehicleTypeFrame;
import com.zhub.servicemaster.models.Module;
import com.zhub.servicemaster.models.User;
import com.zhub.servicemaster.utils.HibernateUtil;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.SwingConstants;
import javax.swing.border.MatteBorder;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Ruwan Madawala
 */
public class MainFrame extends javax.swing.JFrame {

    public static User user;

    /**
     * Creates new form MainFrame
     *
     * @param user
     */
    public MainFrame(User user) {
        initComponents();
        MainFrame.user = user;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane(){
            ImageIcon icon = new ImageIcon("images\\background.jpg");
            Image image = icon.getImage();

            Image newimage = image.getScaledInstance(1500, 1000, Image.SCALE_SMOOTH);

            @Override
            protected void paintComponent(Graphics g)
            {
                super.paintComponent(g);
                g.drawImage(newimage, 0, 0, this);
            }
        };
        panelShortcuts = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        mMasterFiles = new javax.swing.JMenu();
        mAccounts = new javax.swing.JMenuItem();
        masterSeparator1 = new javax.swing.JPopupMenu.Separator();
        mStorage = new javax.swing.JMenu();
        miStorage = new javax.swing.JMenuItem();
        miStorageRacks = new javax.swing.JMenuItem();
        miRackSlots = new javax.swing.JMenuItem();
        masterSeparator2 = new javax.swing.JPopupMenu.Separator();
        miLocations = new javax.swing.JMenuItem();
        miPrinters = new javax.swing.JMenuItem();
        masterSeparator3 = new javax.swing.JPopupMenu.Separator();
        miCategory = new javax.swing.JMenuItem();
        miSubCategory = new javax.swing.JMenuItem();
        miItemType = new javax.swing.JMenuItem();
        miItems = new javax.swing.JMenuItem();
        miBom = new javax.swing.JMenuItem();
        masterSeparator4 = new javax.swing.JPopupMenu.Separator();
        miBusinessPartner = new javax.swing.JMenuItem();
        masterSeparator5 = new javax.swing.JPopupMenu.Separator();
        miVehileType = new javax.swing.JMenuItem();
        miVehicles = new javax.swing.JMenuItem();
        fileSeparator1 = new javax.swing.JPopupMenu.Separator();
        miUsers = new javax.swing.JMenuItem();
        miUserPrivilages = new javax.swing.JMenuItem();
        fileSeparator2 = new javax.swing.JPopupMenu.Separator();
        miExit = new javax.swing.JMenuItem();
        mTransactions = new javax.swing.JMenu();
        miService = new javax.swing.JMenuItem();
        miSale = new javax.swing.JMenuItem();
        miSalesReturns = new javax.swing.JMenuItem();
        transactionSeparator2 = new javax.swing.JPopupMenu.Separator();
        miGRN = new javax.swing.JMenuItem();
        transactionSeparator3 = new javax.swing.JPopupMenu.Separator();
        miChequeReceipts = new javax.swing.JMenuItem();
        miBillSetoff = new javax.swing.JMenuItem();
        miPayments = new javax.swing.JMenuItem();
        mReports = new javax.swing.JMenu();
        miSalesHistory = new javax.swing.JMenuItem();
        reportSeparator1 = new javax.swing.JPopupMenu.Separator();
        miSalesReports = new javax.swing.JMenuItem();
        miStockReports = new javax.swing.JMenuItem();
        mOptions = new javax.swing.JMenu();
        miAddShortcuts = new javax.swing.JMenuItem();
        miChangeBackground = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Enterprise");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        desktopPane.setBackground(new java.awt.Color(204, 204, 204));

        panelShortcuts.setOpaque(false);
        panelShortcuts.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 4, 4));

        desktopPane.setLayer(panelShortcuts, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(desktopPaneLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(panelShortcuts, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(136, Short.MAX_VALUE))
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelShortcuts, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
        );

        mFile.setText("File");
        mFile.setEnabled(false);
        mFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mFileActionPerformed(evt);
            }
        });

        mMasterFiles.setText("Master Files");
        mMasterFiles.setEnabled(false);

        mAccounts.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mAccounts.setText("Accounts");
        mAccounts.setEnabled(false);
        mAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAccountsActionPerformed(evt);
            }
        });
        mMasterFiles.add(mAccounts);
        mMasterFiles.add(masterSeparator1);

        mStorage.setText("Storage");
        mStorage.setEnabled(false);

        miStorage.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miStorage.setText("Storage");
        miStorage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStorageActionPerformed(evt);
            }
        });
        mStorage.add(miStorage);

        miStorageRacks.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miStorageRacks.setText("Storage Racks");
        miStorageRacks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStorageRacksActionPerformed(evt);
            }
        });
        mStorage.add(miStorageRacks);

        miRackSlots.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miRackSlots.setText("Rack Slots");
        miRackSlots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miRackSlotsActionPerformed(evt);
            }
        });
        mStorage.add(miRackSlots);

        mMasterFiles.add(mStorage);
        mMasterFiles.add(masterSeparator2);

        miLocations.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miLocations.setText("Locations");
        miLocations.setEnabled(false);
        miLocations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLocationsActionPerformed(evt);
            }
        });
        mMasterFiles.add(miLocations);

        miPrinters.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miPrinters.setText("Printers");
        miPrinters.setEnabled(false);
        miPrinters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPrintersActionPerformed(evt);
            }
        });
        mMasterFiles.add(miPrinters);
        mMasterFiles.add(masterSeparator3);

        miCategory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miCategory.setText("Category");
        miCategory.setEnabled(false);
        miCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCategoryActionPerformed(evt);
            }
        });
        mMasterFiles.add(miCategory);

        miSubCategory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miSubCategory.setText("Sub Category");
        miSubCategory.setEnabled(false);
        miSubCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSubCategoryActionPerformed(evt);
            }
        });
        mMasterFiles.add(miSubCategory);

        miItemType.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miItemType.setText("Item Type");
        miItemType.setEnabled(false);
        miItemType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miItemTypeActionPerformed(evt);
            }
        });
        mMasterFiles.add(miItemType);

        miItems.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miItems.setText("Items");
        miItems.setEnabled(false);
        miItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miItemsActionPerformed(evt);
            }
        });
        mMasterFiles.add(miItems);

        miBom.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miBom.setText("BOM");
        miBom.setEnabled(false);
        miBom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBomActionPerformed(evt);
            }
        });
        mMasterFiles.add(miBom);
        mMasterFiles.add(masterSeparator4);

        miBusinessPartner.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miBusinessPartner.setText("Business Partner");
        miBusinessPartner.setEnabled(false);
        miBusinessPartner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBusinessPartnerActionPerformed(evt);
            }
        });
        mMasterFiles.add(miBusinessPartner);
        mMasterFiles.add(masterSeparator5);

        miVehileType.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miVehileType.setText("Vehicle Type");
        miVehileType.setEnabled(false);
        miVehileType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miVehileTypeActionPerformed(evt);
            }
        });
        mMasterFiles.add(miVehileType);

        miVehicles.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miVehicles.setText("Vehicles");
        miVehicles.setEnabled(false);
        miVehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miVehiclesActionPerformed(evt);
            }
        });
        mMasterFiles.add(miVehicles);

        mFile.add(mMasterFiles);
        mFile.add(fileSeparator1);

        miUsers.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miUsers.setText("Users");
        miUsers.setEnabled(false);
        mFile.add(miUsers);

        miUserPrivilages.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miUserPrivilages.setText("User Privilages");
        miUserPrivilages.setEnabled(false);
        mFile.add(miUserPrivilages);
        mFile.add(fileSeparator2);

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mFile.add(miExit);

        menuBar.add(mFile);

        mTransactions.setText("Transactions");
        mTransactions.setEnabled(false);

        miService.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        miService.setText("Service");
        miService.setEnabled(false);
        miService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miServiceActionPerformed(evt);
            }
        });
        mTransactions.add(miService);

        miSale.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        miSale.setText("Sale");
        miSale.setEnabled(false);
        miSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaleActionPerformed(evt);
            }
        });
        mTransactions.add(miSale);

        miSalesReturns.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        miSalesReturns.setText("Sales Returns");
        miSalesReturns.setEnabled(false);
        miSalesReturns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSalesReturnsActionPerformed(evt);
            }
        });
        mTransactions.add(miSalesReturns);
        mTransactions.add(transactionSeparator2);

        miGRN.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        miGRN.setText("Good Receive");
        miGRN.setActionCommand("GRN");
        miGRN.setEnabled(false);
        miGRN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miGRNActionPerformed(evt);
            }
        });
        mTransactions.add(miGRN);
        mTransactions.add(transactionSeparator3);

        miChequeReceipts.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        miChequeReceipts.setText("Cheque Receipts");
        miChequeReceipts.setEnabled(false);
        miChequeReceipts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChequeReceiptsActionPerformed(evt);
            }
        });
        mTransactions.add(miChequeReceipts);

        miBillSetoff.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        miBillSetoff.setText("Bill Setoff");
        miBillSetoff.setEnabled(false);
        miBillSetoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBillSetoffActionPerformed(evt);
            }
        });
        mTransactions.add(miBillSetoff);

        miPayments.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        miPayments.setText("Payments");
        miPayments.setEnabled(false);
        miPayments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPaymentsActionPerformed(evt);
            }
        });
        mTransactions.add(miPayments);

        menuBar.add(mTransactions);

        mReports.setText("Reports");
        mReports.setEnabled(false);

        miSalesHistory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        miSalesHistory.setText("Sales History");
        miSalesHistory.setEnabled(false);
        miSalesHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSalesHistoryActionPerformed(evt);
            }
        });
        mReports.add(miSalesHistory);
        mReports.add(reportSeparator1);

        miSalesReports.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        miSalesReports.setText("Sales Reports");
        miSalesReports.setEnabled(false);
        miSalesReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSalesReportsActionPerformed(evt);
            }
        });
        mReports.add(miSalesReports);

        miStockReports.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        miStockReports.setText("Stock Reports");
        miStockReports.setEnabled(false);
        miStockReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miStockReportsActionPerformed(evt);
            }
        });
        mReports.add(miStockReports);

        menuBar.add(mReports);

        mOptions.setText("Options");
        mOptions.setEnabled(false);

        miAddShortcuts.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miAddShortcuts.setText("Add Shortcuts");
        miAddShortcuts.setEnabled(false);
        miAddShortcuts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAddShortcutsActionPerformed(evt);
            }
        });
        mOptions.add(miAddShortcuts);

        miChangeBackground.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miChangeBackground.setText("Change background");
        miChangeBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miChangeBackgroundActionPerformed(evt);
            }
        });
        mOptions.add(miChangeBackground);

        menuBar.add(mOptions);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane)
        );

        setSize(new java.awt.Dimension(616, 538));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        this.exitApllication();
    }//GEN-LAST:event_miExitActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();

        Query query = session.createQuery("from Module m order by m.moduleId");
        List objectList = query.list();
        for (Object object : objectList) {
            if (object instanceof Module) {
                Module module = (Module) object;
                String moduleCode = module.getModuleCode();
                String moduleName = module.getModuleName();
                int max = module.getIsMaximized();
                HashMap<String, Object> map = new HashMap<>();
                map.put("ModuleCode", moduleCode);
                map.put("Max", max);
                allModuleMap.put(moduleName, map);
            }
        }

        query = session.createQuery("from Module m where m.isShortcutAdded = 0 order by m.moduleId");
        objectList = query.list();
        for (Object object : objectList) {
            if (object instanceof Module) {
                Module module = (Module) object;
                String moduleCode = module.getModuleCode();
                String moduleName = module.getModuleName();
                int max = module.getIsMaximized();
                HashMap<String, Object> map = new HashMap<>();
                map.put("ModuleCode", moduleCode);
                map.put("Max", max);
                availableModuleMap.put(moduleName, map);
            }
        }

        query = session.createQuery("from Module m where m.isShortcutAdded = 1 order by m.moduleId");
        objectList = query.list();
        for (Object object : objectList) {
            if (object instanceof Module) {
                Module module = (Module) object;
                String moduleCode = module.getModuleCode();
                String moduleName = module.getModuleName();
                int max = module.getIsMaximized();
                HashMap<String, Object> map = new HashMap<>();
                map.put("ModuleCode", moduleCode);
                map.put("Max", max);
                addedModuleMap.put(moduleName, map);
            }
        }
        session.getTransaction().commit();
        session.close();

        if (!addedModuleMap.isEmpty()) {
            Set<String> keySet = addedModuleMap.keySet();
            for (String key : keySet) {
                this.addShortCuts(key);
            }

            this.panelShortcuts.revalidate();
            this.panelShortcuts.repaint();
        }
    }//GEN-LAST:event_formWindowOpened

    private void miAddShortcutsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAddShortcutsActionPerformed
        ShortCutsFrame shortCuts = new ShortCutsFrame(this);
        shortCuts.setLocation(300, 0);
        desktopPane.add(shortCuts);
        shortCuts.setVisible(true);
    }//GEN-LAST:event_miAddShortcutsActionPerformed

    private void miChangeBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miChangeBackgroundActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.OPEN_DIALOG) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                Path path = Paths.get("images");
                Files.copy(new FileInputStream(selectedFile), path, StandardCopyOption.REPLACE_EXISTING);
                InformationDialog.showMessageBox("Please restart the application", "Restart", null);
                System.exit(0);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_miChangeBackgroundActionPerformed

    private void mFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mFileActionPerformed
        this.exitApllication();
    }//GEN-LAST:event_mFileActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.exitApllication();
    }//GEN-LAST:event_formWindowClosing

    private void miCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCategoryActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miCategoryActionPerformed

    private void miSubCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSubCategoryActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miSubCategoryActionPerformed

    private void miLocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLocationsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miLocationsActionPerformed

    private void miStorageRacksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miStorageRacksActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miStorageRacksActionPerformed

    private void miStorageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miStorageActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miStorageActionPerformed

    private void miRackSlotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miRackSlotsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miRackSlotsActionPerformed

    private void miPrintersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPrintersActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miPrintersActionPerformed

    private void miItemTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miItemTypeActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miItemTypeActionPerformed

    private void miBusinessPartnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBusinessPartnerActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miBusinessPartnerActionPerformed

    private void miVehileTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miVehileTypeActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miVehileTypeActionPerformed

    private void miVehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miVehiclesActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miVehiclesActionPerformed

    private void miItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miItemsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miItemsActionPerformed

    private void miServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miServiceActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miServiceActionPerformed

    private void miBomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBomActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miBomActionPerformed

    private void miStockReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miStockReportsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miStockReportsActionPerformed

    private void miSalesReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSalesReportsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miSalesReportsActionPerformed

    private void miGRNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miGRNActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miGRNActionPerformed

    private void miSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaleActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miSaleActionPerformed

    private void miSalesHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSalesHistoryActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miSalesHistoryActionPerformed

    private void miSalesReturnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSalesReturnsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miSalesReturnsActionPerformed

    private void mAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mAccountsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_mAccountsActionPerformed

    private void miBillSetoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBillSetoffActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miBillSetoffActionPerformed

    private void miPaymentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPaymentsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miPaymentsActionPerformed

    private void miChequeReceiptsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miChequeReceiptsActionPerformed
        MainFrame.openWindow(MainFrame.allModuleMap.get(evt.getActionCommand()));
    }//GEN-LAST:event_miChequeReceiptsActionPerformed

    private void exitApllication() {
        ConfirmationDialog.showMessageBox("Are you sure?", "Sure", null);
        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
            System.exit(0);
        }
    }

    public static void openWindow(HashMap<String, Object> moduleDetailsMap) {
        String moduleCode = (String) moduleDetailsMap.get("ModuleCode");
        int max = (int) moduleDetailsMap.get("Max");

        boolean maximized = false;
        if (max == 1) {
            maximized = true;
        }

        JInternalFrame internalFrame = null;
        switch (moduleCode) {
            case "1": {
                break;
            }
            case "2": {
                break;
            }
            case "3": {
                internalFrame = new StorageFrame();
                break;
            }
            case "4": {
                internalFrame = new RacksFrame();
                break;
            }
            case "5": {
                internalFrame = new RackSlotFrame();
                break;
            }
            case "6": {
                internalFrame = new LocationFrame();
                break;
            }
            case "7": {
                internalFrame = new CategoryFrame();
                break;
            }
            case "8": {
                internalFrame = new ItemTypeFrame();
                break;
            }
            case "9": {
                internalFrame = new SubCategoryFrame();
                break;
            }
            case "10": {
                internalFrame = new ItemFrame();
                break;
            }
            case "11": {
                internalFrame = new BusinessPartnerFrame();
                break;
            }
            case "12": {
                internalFrame = new PrinterFrame();
                break;
            }
            case "13": {
                internalFrame = new VehicleTypeFrame();
                break;
            }
            case "14": {
                internalFrame = new VehicleFrame();
                break;
            }
            case "15": {
                break;
            }
            case "16": {
                internalFrame = new ServicesFrame();
                break;
            }
            case "17": {
                internalFrame = new BomFrame();
                break;
            }
            case "18": {
                internalFrame = new GrnFrame();
                break;
            }
            case "19": {
                internalFrame = new DirectSaleFrame();
                break;
            }
            case "20": {
                internalFrame = new SaleHistoryFrame();
                break;
            }
            case "21": {
                internalFrame = new ItemReturnFrame();
                break;
            }
            case "22": {
                internalFrame = new AccountsFrame();
                break;
            }
            case "23": {
                internalFrame = new BillSetoffFrame();
                break;
            }
            case "24": {
                internalFrame = new ChequeReceipt();
                break;
            }
            default: {
                internalFrame = null;
            }
        }

        if (internalFrame != null) {
            try {
                desktopPane.add(internalFrame);
                internalFrame.setMaximum(maximized);
                internalFrame.setVisible(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void addShortCuts(String name) {
        JButton button = new JButton(name);
        button.setName(name);
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
            }

            @Override
            public void mouseEntered(MouseEvent evt) {
                ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
            }

            @Override
            public void mouseExited(MouseEvent evt) {
                ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
            }
        });
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                MainFrame.openWindow(MainFrame.allModuleMap.get(((JButton) evt.getSource()).getName().trim()));
            }
        });

        button.setPreferredSize(new Dimension(150, 50));
        button.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 18));
        button.setHorizontalAlignment(SwingConstants.CENTER);
        button.setVerticalAlignment(SwingConstants.CENTER);
        button.setBackground(SystemData.BUTTON_BACKGROUND_COLOR);
        button.setBorder(new MatteBorder(1, 1, 1, 1, SystemData.BORDER_COLOR));
        button.setContentAreaFilled(false);
        button.setOpaque(true);
        this.panelShortcuts.add(button);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JDesktopPane desktopPane;
    private javax.swing.JPopupMenu.Separator fileSeparator1;
    private javax.swing.JPopupMenu.Separator fileSeparator2;
    public javax.swing.JMenuItem mAccounts;
    public javax.swing.JMenu mFile;
    public javax.swing.JMenu mMasterFiles;
    public javax.swing.JMenu mOptions;
    public javax.swing.JMenu mReports;
    public javax.swing.JMenu mStorage;
    public javax.swing.JMenu mTransactions;
    private javax.swing.JPopupMenu.Separator masterSeparator1;
    private javax.swing.JPopupMenu.Separator masterSeparator2;
    private javax.swing.JPopupMenu.Separator masterSeparator3;
    private javax.swing.JPopupMenu.Separator masterSeparator4;
    private javax.swing.JPopupMenu.Separator masterSeparator5;
    private javax.swing.JMenuBar menuBar;
    public javax.swing.JMenuItem miAddShortcuts;
    public javax.swing.JMenuItem miBillSetoff;
    public javax.swing.JMenuItem miBom;
    public javax.swing.JMenuItem miBusinessPartner;
    public javax.swing.JMenuItem miCategory;
    private javax.swing.JMenuItem miChangeBackground;
    public javax.swing.JMenuItem miChequeReceipts;
    private javax.swing.JMenuItem miExit;
    public javax.swing.JMenuItem miGRN;
    public javax.swing.JMenuItem miItemType;
    public javax.swing.JMenuItem miItems;
    public javax.swing.JMenuItem miLocations;
    public javax.swing.JMenuItem miPayments;
    public javax.swing.JMenuItem miPrinters;
    private javax.swing.JMenuItem miRackSlots;
    public javax.swing.JMenuItem miSale;
    public javax.swing.JMenuItem miSalesHistory;
    public javax.swing.JMenuItem miSalesReports;
    public javax.swing.JMenuItem miSalesReturns;
    public javax.swing.JMenuItem miService;
    public javax.swing.JMenuItem miStockReports;
    private javax.swing.JMenuItem miStorage;
    private javax.swing.JMenuItem miStorageRacks;
    public javax.swing.JMenuItem miSubCategory;
    public javax.swing.JMenuItem miUserPrivilages;
    public javax.swing.JMenuItem miUsers;
    public javax.swing.JMenuItem miVehicles;
    public javax.swing.JMenuItem miVehileType;
    public javax.swing.JPanel panelShortcuts;
    private javax.swing.JPopupMenu.Separator reportSeparator1;
    private javax.swing.JPopupMenu.Separator transactionSeparator2;
    private javax.swing.JPopupMenu.Separator transactionSeparator3;
    // End of variables declaration//GEN-END:variables
    public static final LinkedHashMap<String, HashMap<String, Object>> allModuleMap = new LinkedHashMap<>();
    public static final LinkedHashMap<String, HashMap<String, Object>> availableModuleMap = new LinkedHashMap<>();
    public static final LinkedHashMap<String, HashMap<String, Object>> addedModuleMap = new LinkedHashMap<>();
}
