/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zhub.servicemaster.internalFrames;

import com.zhub.servicemaster.data.SystemData;
import com.zhub.servicemaster.dialogs.ConfirmationDialog;
import com.zhub.servicemaster.dialogs.InformationDialog;
import com.zhub.servicemaster.forms.MainFrame;
import com.zhub.servicemaster.functions.AutoCompletion;
import com.zhub.servicemaster.functions.StringValidateDocumentFilter;
import com.zhub.servicemaster.functions.UpperCaseDocumentFilter;
import com.zhub.servicemaster.guiFunctions.ButtonFunctions;
import com.zhub.servicemaster.keys.KeyCodeFunctions;
import com.zhub.servicemaster.models.IssueMethod;
import com.zhub.servicemaster.models.Item;
import com.zhub.servicemaster.models.ItemBrand;
import com.zhub.servicemaster.models.ItemType;
import com.zhub.servicemaster.models.RackSlot;
import com.zhub.servicemaster.models.SellingPrice;
import com.zhub.servicemaster.models.SubCategory;
import com.zhub.servicemaster.models.Uom;
import com.zhub.servicemaster.utils.HibernateUtil;
import com.zhub.servicemaster.views.ItemView;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author Neyomal
 */
public class ItemFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form ItemFrame
     */
    public ItemFrame() {
        initComponents();

        //Setting default values 
        cbxIsPhysical.setSelected(true);
        cbxIsActive.setSelected(true);
        //txtModTime.setText("12:00:00");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tblSellingPricesPopup = new javax.swing.JPopupMenu();
        miEdit = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        txtItemCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        txtSellingQuantity = new javax.swing.JTextField();
        txtReorderQuantity = new javax.swing.JTextField();
        cbxIsPhysical = new javax.swing.JCheckBox();
        cbxIsActive = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        cmbSubCategory = new javax.swing.JComboBox<>();
        cmbRackSlot = new javax.swing.JComboBox<>();
        cmbBuyingUOM = new javax.swing.JComboBox<>();
        cmbSellingUOM = new javax.swing.JComboBox<>();
        txtRemarks = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cmbBrand = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        cmbIssueMethod = new javax.swing.JComboBox<>();
        btnReset = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnCodeSerach = new javax.swing.JButton();
        btnNameSearch = new javax.swing.JButton();
        sellingPricePanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        tblSellingPrices = new javax.swing.JTable();
        addSellsPricePanel = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JFormattedTextField();
        jLabel22 = new javax.swing.JLabel();
        dateEffectiveDate = new com.toedter.calendar.JDateChooser();
        jLabel23 = new javax.swing.JLabel();
        txtSellingPriceRemark = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        cmbItemType = new javax.swing.JComboBox<>();
        cmbBaseItem = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbxFromBom = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        txtSearchKey = new javax.swing.JTextField();
        txtPrintName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();

        miEdit.setText("Edit");
        miEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditActionPerformed(evt);
            }
        });
        tblSellingPricesPopup.add(miEdit);

        setClosable(true);
        setTitle("Add New Item");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("Item Code :");

        txtItemCode.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtItemCode.setNextFocusableComponent(txtItemName);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Item Name :");

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setText("Selling quantity :");

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setText("Reorder Quantity :");

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel6.setText("Is Physical :");

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel7.setText("Is Active :");

        jLabel14.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel14.setText("Remarks :");

        txtItemName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtItemName.setNextFocusableComponent(txtPrintName);
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNameKeyReleased(evt);
            }
        });

        txtSellingQuantity.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSellingQuantity.setNextFocusableComponent(txtReorderQuantity);

        txtReorderQuantity.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtReorderQuantity.setNextFocusableComponent(cmbIssueMethod);

        cbxIsPhysical.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxIsPhysical.setSelected(true);

        cbxIsActive.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxIsActive.setSelected(true);

        jLabel15.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel15.setText("Sub Category :");

        jLabel16.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel16.setText("Rack Slot :");

        jLabel17.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel17.setText("Buying UOM :");

        jLabel18.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel18.setText("Selling UOM :");

        cmbSubCategory.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbSubCategory.setNextFocusableComponent(cmbBaseItem);

        cmbRackSlot.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbRackSlot.setNextFocusableComponent(cmbBrand);

        cmbBuyingUOM.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbBuyingUOM.setNextFocusableComponent(cmbSubCategory);

        cmbSellingUOM.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbSellingUOM.setNextFocusableComponent(cmbBuyingUOM);

        txtRemarks.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtRemarks.setNextFocusableComponent(txtSellingPrice);

        jLabel19.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel19.setText("Brand :");

        cmbBrand.setEditable(true);
        cmbBrand.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbBrand.setNextFocusableComponent(txtRemarks);

        jLabel20.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel20.setText("Issue Method :");

        cmbIssueMethod.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbIssueMethod.setNextFocusableComponent(cmbSellingUOM);

        btnReset.setBackground(new java.awt.Color(150, 255, 150));
        btnReset.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnReset.setContentAreaFilled(false);
        btnReset.setOpaque(true);
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnResetMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnResetMouseExited(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(150, 255, 150));
        btnSave.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnSave.setText("Save");
        btnSave.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnSave.setContentAreaFilled(false);
        btnSave.setOpaque(true);
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMouseExited(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(150, 255, 150));
        btnClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnClose.setContentAreaFilled(false);
        btnClose.setOpaque(true);
        btnClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCloseMouseExited(evt);
            }
        });
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnCodeSerach.setBackground(new java.awt.Color(150, 255, 150));
        btnCodeSerach.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnCodeSerach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btnCodeSerach.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnCodeSerach.setContentAreaFilled(false);
        btnCodeSerach.setOpaque(true);
        btnCodeSerach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCodeSerachMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCodeSerachMouseExited(evt);
            }
        });
        btnCodeSerach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodeSerachActionPerformed(evt);
            }
        });

        btnNameSearch.setBackground(new java.awt.Color(150, 255, 150));
        btnNameSearch.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnNameSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btnNameSearch.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnNameSearch.setContentAreaFilled(false);
        btnNameSearch.setOpaque(true);
        btnNameSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnNameSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnNameSearchMouseExited(evt);
            }
        });
        btnNameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNameSearchActionPerformed(evt);
            }
        });

        sellingPricePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)), "Selling Prices", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        tblSellingPrices.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblSellingPrices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Selling Price", "Effective Date", "Remrak"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSellingPrices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSellingPricesMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(tblSellingPrices);
        if (tblSellingPrices.getColumnModel().getColumnCount() > 0) {
            tblSellingPrices.getColumnModel().getColumn(0).setMinWidth(0);
            tblSellingPrices.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblSellingPrices.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        javax.swing.GroupLayout sellingPricePanelLayout = new javax.swing.GroupLayout(sellingPricePanel);
        sellingPricePanel.setLayout(sellingPricePanelLayout);
        sellingPricePanelLayout.setHorizontalGroup(
            sellingPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sellingPricePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(scrollPane)
                .addGap(0, 0, 0))
        );
        sellingPricePanelLayout.setVerticalGroup(
            sellingPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sellingPricePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        addSellsPricePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 152, 0)), "Add Selling Price", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 152, 0))); // NOI18N

        jLabel21.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel21.setText("Selling Price :");

        txtSellingPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtSellingPrice.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSellingPrice.setNextFocusableComponent(dateEffectiveDate);
        txtSellingPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSellingPriceFocusGained(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel22.setText("Effective Date :");

        dateEffectiveDate.setDate(new Date());
        dateEffectiveDate.setDateFormatString("yyyy-MM-dd");
        dateEffectiveDate.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        dateEffectiveDate.setNextFocusableComponent(txtSellingPriceRemark);

        jLabel23.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel23.setText("Remark :");

        txtSellingPriceRemark.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSellingPriceRemark.setNextFocusableComponent(btnAdd);

        btnAdd.setBackground(new java.awt.Color(150, 255, 150));
        btnAdd.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnAdd.setContentAreaFilled(false);
        btnAdd.setOpaque(true);
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddMouseExited(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addSellsPricePanelLayout = new javax.swing.GroupLayout(addSellsPricePanel);
        addSellsPricePanel.setLayout(addSellsPricePanelLayout);
        addSellsPricePanelLayout.setHorizontalGroup(
            addSellsPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSellsPricePanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateEffectiveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSellingPriceRemark, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        addSellsPricePanelLayout.setVerticalGroup(
            addSellsPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addSellsPricePanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(addSellsPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addSellsPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSellingPriceRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateEffectiveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addSellsPricePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        addSellsPricePanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dateEffectiveDate, jLabel21, jLabel22, jLabel23, txtSellingPrice, txtSellingPriceRemark});

        lblID.setFocusable(false);

        jLabel24.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel24.setText("Item Type :");

        cmbItemType.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbItemType.setNextFocusableComponent(cmbRackSlot);

        cmbBaseItem.setEditable(true);
        cmbBaseItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbBaseItem.setNextFocusableComponent(cmbItemType);

        jLabel25.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel25.setText("Base Item :");

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel8.setText("From BOM :");

        cbxFromBom.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setText("Search Key :");

        txtSearchKey.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtSearchKey.setNextFocusableComponent(txtSellingQuantity);

        txtPrintName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtPrintName.setNextFocusableComponent(txtSearchKey);

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel9.setText("Print Name :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sellingPricePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addSellsPricePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtItemName)
                            .addComponent(txtItemCode, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCodeSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPrintName))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel14)
                                    .addGap(508, 508, 508))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel24)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbItemType, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(102, 102, 102)
                                    .addComponent(txtReorderQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel18)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbSellingUOM, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel5)
                                                .addComponent(jLabel19))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtSearchKey, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(cmbBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel6)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(cbxIsPhysical)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jLabel7)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(cbxIsActive)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jLabel8)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(cbxFromBom))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel17)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(cmbBuyingUOM, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel25)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(cmbBaseItem, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(jLabel20)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(102, 102, 102)
                                                    .addComponent(cmbIssueMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel3)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtSellingQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel16)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(cmbRackSlot, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(102, 102, 102)
                                            .addComponent(cmbSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel15)))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel14, jLabel15, jLabel16, jLabel17, jLabel18, jLabel19, jLabel2, jLabel20, jLabel24, jLabel25, jLabel3, jLabel4, jLabel5, jLabel9});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCodeSerach, btnNameSearch});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClose, btnReset, btnSave});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbxIsActive, cbxIsPhysical});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbBaseItem, cmbBrand, cmbBuyingUOM, cmbIssueMethod, cmbItemType, cmbRackSlot, cmbSellingUOM, cmbSubCategory, txtReorderQuantity, txtSearchKey, txtSellingQuantity});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblID, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCodeSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrintName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbSellingUOM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(cmbSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(cmbItemType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearchKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtReorderQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSellingQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(cmbIssueMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(cmbBuyingUOM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbBaseItem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbRackSlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbxIsPhysical, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel19)
                                .addComponent(cmbBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbxIsActive, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8)
                            .addComponent(cbxFromBom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(txtRemarks, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addSellsPricePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sellingPricePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbxFromBom, cbxIsActive, cbxIsPhysical, cmbBaseItem, cmbBrand, cmbBuyingUOM, cmbIssueMethod, cmbItemType, cmbRackSlot, cmbSellingUOM, cmbSubCategory, jLabel1, jLabel14, jLabel15, jLabel16, jLabel17, jLabel18, jLabel19, jLabel2, jLabel20, jLabel24, jLabel25, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel8, txtItemCode, txtItemName, txtReorderQuantity, txtSearchKey, txtSellingQuantity});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCodeSerach, btnNameSearch});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnClose, btnReset, btnSave});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        Session session = HibernateUtil.getSessionFactory().openSession();

        Criteria issueMethodCriteria = session.createCriteria(IssueMethod.class).addOrder(Order.asc("issueMethodId"));
        List<IssueMethod> issueMethods = issueMethodCriteria.list();
        for (IssueMethod issueMethod : issueMethods) {
            cmbIssueMethod.addItem(issueMethod.getIssueMethodCode());
        }

        Criteria ItemBrandCriteria = session.createCriteria(ItemBrand.class).addOrder(Order.asc("brandName"));
        List<ItemBrand> itemBrands = ItemBrandCriteria.list();
        cmbBrand.addItem("NONE");
        for (ItemBrand manufacturer : itemBrands) {
            cmbBrand.addItem(manufacturer.getBrandName());
        }

        Criteria subCategoryCriteria = session.createCriteria(SubCategory.class).addOrder(Order.asc("subCategoryName"));
        List<SubCategory> subCategorys = subCategoryCriteria.list();
        cmbSubCategory.addItem("");
        for (SubCategory subCategory : subCategorys) {
            cmbSubCategory.addItem(subCategory.getSubCategoryName());
        }

        Criteria rackSlotCriteria = session.createCriteria(RackSlot.class).addOrder(Order.asc("rackSlotName"));
        List<RackSlot> rackSlots = rackSlotCriteria.list();
        cmbRackSlot.addItem("");
        for (RackSlot rackSlot : rackSlots) {
            cmbRackSlot.addItem(rackSlot.getRackSlotName());
        }

        Criteria uomCriteria = session.createCriteria(Uom.class).addOrder(Order.asc("uomName"));
        List<Uom> uoms = uomCriteria.list();
        cmbBuyingUOM.addItem("");
        cmbSellingUOM.addItem("");
        for (Uom uom : uoms) {
            cmbBuyingUOM.addItem(uom.getUomName());
            cmbSellingUOM.addItem(uom.getUomName());
        }

        Criteria itemTypeCriteria = session.createCriteria(ItemType.class).addOrder(Order.asc("itemTypeCode"));
        List<ItemType> itemTypes = itemTypeCriteria.list();
        cmbItemType.addItem("");
        for (ItemType itemType : itemTypes) {
            cmbItemType.addItem(itemType.getItemTypeName());
        }

        Criteria itemCriteria = session.createCriteria(Item.class).addOrder(Order.asc("itemName"));
        List<Item> items = itemCriteria.list();
        cmbBaseItem.addItem("NONE");
        for (Item item : items) {
            cmbBaseItem.addItem(item.getItemName());
        }

        session.close();

        AutoCompletion.enable(cmbBaseItem, cmbItemType);
        AutoCompletion.enable(cmbBrand, txtRemarks);
        ((AbstractDocument) txtSearchKey.getDocument()).setDocumentFilter(new UpperCaseDocumentFilter());
        ((AbstractDocument) txtItemName.getDocument()).setDocumentFilter(new StringValidateDocumentFilter());
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnResetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnResetMouseEntered

    private void btnResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnResetMouseExited

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.clearAll();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnSaveMouseEntered

    private void btnSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnSaveMouseExited

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (!verifyInputs()) {
            InformationDialog.showMessageBox("Fill the required fields", "Transaction Incomplete", this);
        } else {
            try {
                if (txtItemCode.getText().trim().toUpperCase().isEmpty()) {
                    List itemByName = this.getItemByName(txtItemName.getText().trim().toUpperCase(), false);
                    if (!itemByName.isEmpty()) {
                        InformationDialog.showMessageBox("Item name already exists.", "Exist", this);
                    } else {
                        KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                        this.saveOrUpdateItem(keyCodeFunctions.getKey("ITM", "Item codes"), false);
                    }
                } else {
                    List itemByCode = this.getItemByCode(txtItemCode.getText().trim().toUpperCase(), false);
                    if (itemByCode.isEmpty()) {
                        InformationDialog.showMessageBox("Invalid item code. Please try again", "Invalid", this);
                    } else {
                        ConfirmationDialog.showMessageBox("Do you want to update?", "Update", this);
                        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
                            this.saveOrUpdateItem(txtItemCode.getText().trim().toUpperCase(), true);
                        }
                    }
                }
            } catch (Exception e) {
                InformationDialog.showMessageBox("Invalid entry. Retry again", "Transaction Status", this);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCloseMouseEntered

    private void btnCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCloseMouseExited

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        ConfirmationDialog.showMessageBox("Are you sure?", "Sure", this);
        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnCodeSerachMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCodeSerachMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCodeSerachMouseEntered

    private void btnCodeSerachMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCodeSerachMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCodeSerachMouseExited

    private void btnCodeSerachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodeSerachActionPerformed
        String itemCode = txtItemCode.getText().trim();
        List items = getItemByCode(itemCode, true);

        if (!items.isEmpty()) {
            ItemView itemView = new ItemView(items, this);
            MainFrame.desktopPane.add(itemView);
            itemView.setVisible(true);
        }
    }//GEN-LAST:event_btnCodeSerachActionPerformed

    private void btnNameSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNameSearchMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnNameSearchMouseEntered

    private void btnNameSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNameSearchMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnNameSearchMouseExited

    private void btnNameSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNameSearchActionPerformed
        String itemName = txtItemName.getText().trim();
        List items = getItemByName(itemName, true);

        if (items.size() > 0) {
            ItemView itemView = new ItemView(items, this);
            MainFrame.desktopPane.add(itemView);
            itemView.setVisible(true);
        }
    }//GEN-LAST:event_btnNameSearchActionPerformed

    private void btnAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnAddMouseEntered

    private void btnAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnAddMouseExited

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (this.verifySellingPriceInputs()) {
            DefaultTableModel tableModel = (DefaultTableModel) tblSellingPrices.getModel();
            tableModel.addRow(new Object[]{
                lblID.getText().isEmpty() ? -1 : Integer.parseInt(lblID.getText().trim()),
                txtSellingPrice.getText().trim(),
                SystemData.DATE_FORMAT.format(dateEffectiveDate.getDate()),
                txtSellingPriceRemark.getText().trim()
            });
            this.clearAddSellingPrice();
            txtSellingPrice.requestFocus();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtSellingPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSellingPriceFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtSellingPrice.selectAll();
            }
        });
    }//GEN-LAST:event_txtSellingPriceFocusGained

    private void tblSellingPricesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSellingPricesMouseClicked
        if (evt.getButton() == 3) {
            int row = tblSellingPrices.rowAtPoint(evt.getPoint());
            int column = tblSellingPrices.columnAtPoint(evt.getPoint());
            tblSellingPrices.changeSelection(row, column, false, false);
            tblSellingPricesPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblSellingPricesMouseClicked

    private void miEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditActionPerformed
        int selectedRow = tblSellingPrices.getSelectedRow();
        if (selectedRow == -1) {
            InformationDialog.showMessageBox("Please select a valid item", "Invalid", this);
        } else {
            try {
                String id = tblSellingPrices.getValueAt(selectedRow, 0).toString();
                String sellingPrice = tblSellingPrices.getValueAt(selectedRow, 1).toString();
                String effectiveDate = tblSellingPrices.getValueAt(selectedRow, 2).toString();
                String remark = tblSellingPrices.getValueAt(selectedRow, 3).toString();

                ((DefaultTableModel) tblSellingPrices.getModel()).removeRow(selectedRow);

                lblID.setText(id);
                txtSellingPrice.setText(sellingPrice);
                dateEffectiveDate.setDate(SystemData.DATE_FORMAT.parse(effectiveDate));
                txtSellingPriceRemark.setText(remark);

                txtSellingPrice.requestFocus();
            } catch (ParseException ex) {
                Logger.getLogger(ItemFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_miEditActionPerformed

    private void txtItemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyReleased
        int keyCode = evt.getKeyCode();
        String value = txtPrintName.getText();
        if (keyCode == KeyEvent.VK_BACK_SPACE) {
            value = value.substring(0, value.length() - 1);
        } else {
            char charactor = evt.getKeyChar();
            if (Character.isAlphabetic(charactor) || 
                    Character.isDigit(charactor) || 
                    charactor == ' ' || 
                    charactor == '-' ||
                    charactor == '\'' ||
                    charactor == '"') {
                value = value + charactor;
            } else {
                System.out.println("Not allowed");
            }
        }

        txtPrintName.setText(value);
    }//GEN-LAST:event_txtItemNameKeyReleased

    public void clearAll() {
        this.setItemCodeEditable(true);
        txtItemCode.setText("");
        txtItemName.setText("");
        txtSearchKey.setText("");
        txtSellingQuantity.setText("");
        txtReorderQuantity.setText("");
        txtRemarks.setText("");
        cbxIsActive.setSelected(true);
        cbxIsPhysical.setSelected(true);
        cbxFromBom.setSelected(false);

        cmbBrand.setSelectedIndex(0);
        cmbSubCategory.setSelectedIndex(0);
        cmbRackSlot.setSelectedIndex(0);
        cmbBuyingUOM.setSelectedIndex(0);
        cmbSellingUOM.setSelectedIndex(0);
        cmbItemType.setSelectedIndex(0);
        cmbBaseItem.setSelectedIndex(0);

        btnSave.setText("Save");

        ((DefaultTableModel) tblSellingPrices.getModel()).setRowCount(0);
        this.clearAddSellingPrice();
    }

    private void clearAddSellingPrice() {
        txtSellingPrice.setText("");
        dateEffectiveDate.setDate(new Date());
        txtSellingPriceRemark.setText("");
    }

    public boolean verifyInputs() {
        return !((txtItemName.getText().isEmpty())
                || (txtSellingQuantity.getText().isEmpty())
                || (txtReorderQuantity.getText().isEmpty())
                || tblSellingPrices.getRowCount() < 1);
    }

    private boolean verifySellingPriceInputs() {
        return !txtSellingPrice.getText().equalsIgnoreCase("0.00") || !txtSellingPrice.getText().isEmpty();
    }

    private List getItemByCode(String itemCode, boolean like) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query query;
        if (like) {
            query = session.createQuery("from Item i where i.itemCode like :code");
            query.setParameter("code", "%" + itemCode + "%");
        } else {
            query = session.createQuery("from Item i where i.itemCode = :code");
            query.setParameter("code", itemCode);
        }
        List list = query.list();

        session.getTransaction().commit();
        session.close();
        return list;
    }

    private List getItemByName(String itemName, boolean like) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query query;
        if (like) {
            query = session.createQuery("from Item i where i.itemName like :name");
            query.setParameter("name", "%" + itemName + "%");
        } else {
            query = session.createQuery("from Item i where i.itemName = :name");
            query.setParameter("name", itemName);
        }
        List list = query.list();
        session.getTransaction().commit();
        session.close();
        return list;
    }

    private void saveOrUpdateItem(String strItemCode, boolean bUpdate) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        Date date = new Date();

        IssueMethod issueMethod = (IssueMethod) session
                .createCriteria(IssueMethod.class)
                .add(Restrictions.eq("issueMethodCode", cmbIssueMethod.getSelectedItem().toString()))
                .uniqueResult();

        ItemBrand itemBrand = (ItemBrand) session
                .createCriteria(ItemBrand.class)
                .add(Restrictions.eq("brandName", cmbBrand.getSelectedItem().toString()))
                .uniqueResult();

        SubCategory subCategory = (SubCategory) session
                .createCriteria(SubCategory.class)
                .add(Restrictions.eq("subCategoryName", cmbSubCategory.getSelectedItem().toString()))
                .uniqueResult();

        RackSlot rackSlot = (RackSlot) session
                .createCriteria(RackSlot.class)
                .add(Restrictions.eq("rackSlotName", cmbRackSlot.getSelectedItem().toString()))
                .uniqueResult();

        Uom buyingUom = (Uom) session
                .createCriteria(Uom.class)
                .add(Restrictions.eq("uomName", cmbBuyingUOM.getSelectedItem().toString()))
                .uniqueResult();

        Uom sellingUom = (Uom) session
                .createCriteria(Uom.class)
                .add(Restrictions.eq("uomName", cmbSellingUOM.getSelectedItem().toString()))
                .uniqueResult();

        ItemType itemType = (ItemType) session
                .createCriteria(ItemType.class)
                .add(Restrictions.eq("itemTypeName", cmbItemType.getSelectedItem().toString()))
                .uniqueResult();

        Item baseItem = (Item) session
                .createCriteria(Item.class)
                .add(Restrictions.eq("itemName", cmbBaseItem.getSelectedItem().toString()))
                .uniqueResult();

        Item item = new Item();
        item.setItemCode(strItemCode);
        if (itemBrand == null || itemBrand.getBrandName().equalsIgnoreCase("NONE")) {
            item.setItemName(txtItemName.getText().trim().toUpperCase());
        } else {
            if (bUpdate) {
                item.setItemName(txtItemName.getText().trim().toUpperCase());
            } else {
                item.setItemName(itemBrand.getBrandName().toUpperCase() + " - " + txtItemName.getText().trim().toUpperCase());
            }
        }

        item.setPrintName(txtPrintName.getText().trim());
        item.setSearchKey(txtSearchKey.getText().trim().toUpperCase());
        item.setItemQuantity(Float.parseFloat(txtSellingQuantity.getText().trim()));
        item.setReorderQuantity(Float.parseFloat(txtReorderQuantity.getText().trim()));
        item.setIsPhysical(cbxIsPhysical.isSelected() ? 1 : 0);
        item.setIsActive(cbxIsActive.isSelected() ? 1 : 0);
        item.setFromBom(cbxFromBom.isSelected());
        item.setCreadetDate(date);
        item.setCreatedTime(date);
        item.setCreatedUser(MainFrame.user.getUserId());
        item.setRemark(txtRemarks.getText().trim().toUpperCase());
        item.setIssueMethodId(((IssueMethod) session.load(IssueMethod.class, issueMethod.getIssueMethodId())).getIssueMethodId());
        if (itemBrand != null) {
            item.setItemBrand((ItemBrand) session.load(ItemBrand.class, itemBrand.getBrandCode()));
        }
        item.setSubCategory((SubCategory) session.load(SubCategory.class, subCategory.getSubCategoryCode()));
        item.setRackSlotCode(((RackSlot) session.load(RackSlot.class, rackSlot.getRackSlotCode())).getRackSlotCode());
        item.setUomByBuyingUom((Uom) session.load(Uom.class, buyingUom.getUomCode()));
        item.setUomBySellingUom((Uom) session.load(Uom.class, sellingUom.getUomCode()));
        item.setItemTypeCode(((ItemType) session.load(ItemType.class, itemType.getItemTypeCode())).getItemTypeCode());
        item.setItem(baseItem);
        session.saveOrUpdate(item);

        for (int i = 0; i < tblSellingPrices.getRowCount(); i++) {
            try {
                int iId = Integer.parseInt(tblSellingPrices.getValueAt(i, 0).toString());
                float fSellingPrice = Float.parseFloat(tblSellingPrices.getValueAt(i, 1).toString());
                String strDate = tblSellingPrices.getValueAt(i, 2).toString();
                String strRemark = tblSellingPrices.getValueAt(i, 3).toString();

                SellingPrice sellingPrice = (SellingPrice) session
                        .createCriteria(SellingPrice.class)
                        .add(Restrictions.eq("sellingPriceId", iId))
                        .add(Restrictions.eq("item", item))
                        .uniqueResult();
                if (sellingPrice != null) {
                    sellingPrice.setModifiedDate(date);
                    sellingPrice.setModifiedTime(date);
                    sellingPrice.setModifiedUser(MainFrame.user.getUserId());
                } else {
                    sellingPrice = new SellingPrice();
                    sellingPrice.setCreatedDate(date);
                    sellingPrice.setCreatedTime(date);
                    sellingPrice.setCreatedUser(MainFrame.user.getUserId());
                }
                sellingPrice.setSellingPrice(fSellingPrice);
                sellingPrice.setEffectiveDate(SystemData.DATE_FORMAT.parse(strDate));
                sellingPrice.setRemark(strRemark);
                sellingPrice.setItem(item);

                session.saveOrUpdate(sellingPrice);
            } catch (ParseException ex) {
                Logger.getLogger(ItemFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        this.loadBaseItems(session);

        transaction.commit();
        session.close();

        if (bUpdate) {
            InformationDialog.showMessageBox(SystemData.RECORD_UPDATED_MESSAGE, SystemData.RECORD_UPDATED_HEADING, this);
        } else {
            InformationDialog.showMessageBox(SystemData.NEW_RECORD_ADDED_MESSAGE, SystemData.NEW_RECORD_ADDED_HEADING, this);
        }
        clearAll();
    }

    public void setItemCode(String itemCode) {
        this.txtItemCode.setText(itemCode);
    }

    public void setItemName(String itemName) {
        this.txtItemName.setText(itemName);
    }

    public void setSearchKey(String searchKey) {
        this.txtSearchKey.setText(searchKey);
    }

    public void setSellingQuantity(String sellingPrice) {
        this.txtSellingQuantity.setText(sellingPrice);
    }

    public void setIssueMethod(String issueMethod) {
        this.cmbIssueMethod.setSelectedItem(issueMethod);
    }

    public void setReorderQty(String reorderQty) {
        this.txtReorderQuantity.setText(reorderQty);
    }

    public void setIsPhysicle(boolean isPhysicle) {
        this.cbxIsPhysical.setSelected(isPhysicle);
    }

    public void setIsActive(boolean isActive) {
        this.cbxIsActive.setSelected(isActive);
    }

    public void setFromBom(boolean fromBom) {
        this.cbxFromBom.setSelected(fromBom);
    }

    public void setRemark(String remark) {
        this.txtRemarks.setText(remark);
    }

    public void setItemBrand(String brand) {
        this.cmbBrand.setSelectedItem(brand);
    }

    public void setSubCategory(String subCategory) {
        cmbSubCategory.setSelectedItem(subCategory);
    }

    public void setRackSlot(String rackSlot) {
        cmbRackSlot.setSelectedItem(rackSlot);
    }

    public void setBuyingUOM(String buyingUOM) {
        cmbBuyingUOM.setSelectedItem(buyingUOM);
    }

    public void setSellingUOM(String sellingUOM) {
        cmbSellingUOM.setSelectedItem(sellingUOM);
    }

    public void setItemType(String itemType) {
        cmbItemType.setSelectedItem(itemType);
    }

    public void setItemCodeEditable(boolean editable) {
        this.txtItemCode.setEditable(editable);
    }

    public void setBtnSaveText(String text) {
        this.btnSave.setText(text);
    }

    public void setSellingPrices(List<SellingPrice> sellingPrices) {
        if (!sellingPrices.isEmpty()) {
            DefaultTableModel tableModel = (DefaultTableModel) tblSellingPrices.getModel();
            tableModel.setRowCount(0);
            for (SellingPrice sellingPrice : sellingPrices) {
                tableModel.addRow(new Object[]{
                    sellingPrice.getSellingPriceId(),
                    sellingPrice.getSellingPrice(),
                    SystemData.DATE_FORMAT.format(sellingPrice.getEffectiveDate()),
                    sellingPrice.getRemark() == null ? "" : sellingPrice.getRemark()
                });
            }
        }
    }

    private void loadBaseItems(Session session) {
        Criteria itemCriteria = session.createCriteria(Item.class).addOrder(Order.asc("itemCode"));
        List<Item> items = itemCriteria.list();
        if (!items.isEmpty()) {
            cmbBaseItem.removeAllItems();
            cmbBaseItem.addItem("NONE");
            for (Item tempItem : items) {
                cmbBaseItem.addItem(tempItem.getItemName());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addSellsPricePanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnCodeSerach;
    private javax.swing.JButton btnNameSearch;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox cbxFromBom;
    private javax.swing.JCheckBox cbxIsActive;
    private javax.swing.JCheckBox cbxIsPhysical;
    private javax.swing.JComboBox<String> cmbBaseItem;
    private javax.swing.JComboBox<String> cmbBrand;
    private javax.swing.JComboBox<String> cmbBuyingUOM;
    private javax.swing.JComboBox<String> cmbIssueMethod;
    private javax.swing.JComboBox<String> cmbItemType;
    private javax.swing.JComboBox<String> cmbRackSlot;
    private javax.swing.JComboBox<String> cmbSellingUOM;
    private javax.swing.JComboBox<String> cmbSubCategory;
    private com.toedter.calendar.JDateChooser dateEffectiveDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblID;
    private javax.swing.JMenuItem miEdit;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel sellingPricePanel;
    private javax.swing.JTable tblSellingPrices;
    private javax.swing.JPopupMenu tblSellingPricesPopup;
    private javax.swing.JTextField txtItemCode;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtPrintName;
    private javax.swing.JTextField txtRemarks;
    private javax.swing.JTextField txtReorderQuantity;
    private javax.swing.JTextField txtSearchKey;
    private javax.swing.JFormattedTextField txtSellingPrice;
    private javax.swing.JTextField txtSellingPriceRemark;
    private javax.swing.JTextField txtSellingQuantity;
    // End of variables declaration//GEN-END:variables
}
