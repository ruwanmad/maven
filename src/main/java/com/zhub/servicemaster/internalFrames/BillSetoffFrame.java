/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zhub.servicemaster.internalFrames;

import com.zhub.servicemaster.accounts.PostAccounts;
import com.zhub.servicemaster.data.SystemData;
import com.zhub.servicemaster.dialogs.InformationDialog;
import com.zhub.servicemaster.forms.MainFrame;
import com.zhub.servicemaster.functions.AutoCompletion;
import com.zhub.servicemaster.guiFunctions.ButtonFunctions;
import com.zhub.servicemaster.keys.KeyCodeFunctions;
import com.zhub.servicemaster.models.Account;
import com.zhub.servicemaster.models.AccountPosting;
import com.zhub.servicemaster.models.BusinessPartner;
import com.zhub.servicemaster.models.Invoice;
import com.zhub.servicemaster.models.Payment;
import com.zhub.servicemaster.models.PaymentType;
import com.zhub.servicemaster.models.Sale;
import com.zhub.servicemaster.models.SaleStatus;
import com.zhub.servicemaster.models.SubAccount;
import com.zhub.servicemaster.utils.HibernateUtil;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author RuwanM
 */
public class BillSetoffFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form RecieptFrame
     */
    public BillSetoffFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paymentTypeGroup = new javax.swing.ButtonGroup();
        headerPanel = new javax.swing.JPanel();
        btnLoad = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmbAccount = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtTotalInvoices = new javax.swing.JFormattedTextField();
        rbtCash = new javax.swing.JRadioButton();
        rbtCheque = new javax.swing.JRadioButton();
        btnClose = new javax.swing.JButton();
        btnSettle = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        invoicePanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        tblInvoices = new javax.swing.JTable();
        inhandChequesPanel = new javax.swing.JPanel();
        scrollPane1 = new javax.swing.JScrollPane();
        tblInhandCheques = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cbxAddToAdvance = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        txtBalanceAmount = new javax.swing.JFormattedTextField();
        txtInvoiceAmount = new javax.swing.JFormattedTextField();
        txtPayingAmount = new javax.swing.JFormattedTextField();
        txtAdvancedAmount = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbxAddToInvoice = new javax.swing.JCheckBox();
        btnPrintAllInvoice = new javax.swing.JButton();

        setClosable(true);
        setTitle("Bill Setoff");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        btnLoad.setBackground(new java.awt.Color(150, 255, 150));
        btnLoad.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnLoad.setText("Load");
        btnLoad.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnLoad.setContentAreaFilled(false);
        btnLoad.setOpaque(true);
        btnLoad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLoadMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLoadMouseExited(evt);
            }
        });
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("Account :");

        cmbAccount.setEditable(true);
        cmbAccount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Total Invoices : ");

        txtTotalInvoices.setEditable(false);
        txtTotalInvoices.setBackground(new java.awt.Color(255, 255, 255));
        txtTotalInvoices.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        txtTotalInvoices.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtTotalInvoices.setText("0.0");
        txtTotalInvoices.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        paymentTypeGroup.add(rbtCash);
        rbtCash.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rbtCash.setSelected(true);
        rbtCash.setText("Cash");
        rbtCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtCashActionPerformed(evt);
            }
        });

        paymentTypeGroup.add(rbtCheque);
        rbtCheque.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rbtCheque.setText("Cheque");
        rbtCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtChequeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalInvoices, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addComponent(rbtCash)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtCheque)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        headerPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rbtCash, rbtCheque});

        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTotalInvoices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtCash)
                    .addComponent(rbtCheque))
                .addGap(0, 0, 0))
        );

        headerPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnLoad, cmbAccount, jLabel1, jLabel2, rbtCash, rbtCheque, txtTotalInvoices});

        btnClose.setBackground(new java.awt.Color(150, 255, 150));
        btnClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnClose.setContentAreaFilled(false);
        btnClose.setOpaque(true);
        btnClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCloseMouseExited(evt);
            }
        });
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnSettle.setBackground(new java.awt.Color(150, 255, 150));
        btnSettle.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnSettle.setText("Settle");
        btnSettle.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnSettle.setContentAreaFilled(false);
        btnSettle.setOpaque(true);
        btnSettle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSettleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSettleMouseExited(evt);
            }
        });
        btnSettle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettleActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(150, 255, 150));
        btnReset.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnReset.setContentAreaFilled(false);
        btnReset.setOpaque(true);
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnResetMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnResetMouseExited(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        panel.setLayout(new javax.swing.BoxLayout(panel, javax.swing.BoxLayout.PAGE_AXIS));

        invoicePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(50, 255, 50), 2), "Invoices", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 51))); // NOI18N

        tblInvoices.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice #", "Date", "Total Amount", "Paid Amount", "Due Amount", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInvoices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblInvoicesMouseReleased(evt);
            }
        });
        scrollPane.setViewportView(tblInvoices);

        javax.swing.GroupLayout invoicePanelLayout = new javax.swing.GroupLayout(invoicePanel);
        invoicePanel.setLayout(invoicePanelLayout);
        invoicePanelLayout.setHorizontalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoicePanelLayout.createSequentialGroup()
                .addComponent(scrollPane)
                .addGap(0, 0, 0))
        );
        invoicePanelLayout.setVerticalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        panel.add(invoicePanel);

        inhandChequesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(50, 255, 50), 2), "Inhand Cheques", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 51))); // NOI18N

        tblInhandCheques.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblInhandCheques.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cheque #", "Given Date", "Cheque Date", "Amount", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInhandCheques.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblInhandChequesMouseReleased(evt);
            }
        });
        scrollPane1.setViewportView(tblInhandCheques);
        if (tblInhandCheques.getColumnModel().getColumnCount() > 0) {
            tblInhandCheques.getColumnModel().getColumn(0).setResizable(false);
            tblInhandCheques.getColumnModel().getColumn(0).setPreferredWidth(250);
            tblInhandCheques.getColumnModel().getColumn(1).setResizable(false);
            tblInhandCheques.getColumnModel().getColumn(2).setResizable(false);
            tblInhandCheques.getColumnModel().getColumn(3).setResizable(false);
            tblInhandCheques.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout inhandChequesPanelLayout = new javax.swing.GroupLayout(inhandChequesPanel);
        inhandChequesPanel.setLayout(inhandChequesPanelLayout);
        inhandChequesPanelLayout.setHorizontalGroup(
            inhandChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inhandChequesPanelLayout.createSequentialGroup()
                .addComponent(scrollPane1)
                .addGap(0, 0, 0))
        );
        inhandChequesPanelLayout.setVerticalGroup(
            inhandChequesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inhandChequesPanelLayout.createSequentialGroup()
                .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        panel.add(inhandChequesPanel);

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setText("Invoice Amount :");

        cbxAddToAdvance.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxAddToAdvance.setText("Add To Advance");

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setText("Balance Amount :");

        txtBalanceAmount.setEditable(false);
        txtBalanceAmount.setBackground(new java.awt.Color(255, 255, 255));
        txtBalanceAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        txtBalanceAmount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtBalanceAmount.setText("0.0");
        txtBalanceAmount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        txtInvoiceAmount.setEditable(false);
        txtInvoiceAmount.setBackground(new java.awt.Color(255, 255, 255));
        txtInvoiceAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        txtInvoiceAmount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtInvoiceAmount.setText("0.0");
        txtInvoiceAmount.setToolTipText("");
        txtInvoiceAmount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        txtPayingAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        txtPayingAmount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtPayingAmount.setText("0.0");
        txtPayingAmount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtPayingAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPayingAmountFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPayingAmountFocusLost(evt);
            }
        });
        txtPayingAmount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPayingAmountKeyPressed(evt);
            }
        });

        txtAdvancedAmount.setEditable(false);
        txtAdvancedAmount.setBackground(new java.awt.Color(255, 255, 255));
        txtAdvancedAmount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        txtAdvancedAmount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtAdvancedAmount.setText("0.0");
        txtAdvancedAmount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel7.setText("Advanced Amount : ");

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel8.setText("Paying Amount :");

        cbxAddToInvoice.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxAddToInvoice.setText("Add To Invoice");
        cbxAddToInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAddToInvoiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbxAddToAdvance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBalanceAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAdvancedAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxAddToInvoice)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel8)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPayingAmount)
                            .addComponent(txtInvoiceAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))))
                .addGap(0, 0, 0))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBalanceAmount, txtInvoiceAmount});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel4, jLabel5, jLabel8});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtInvoiceAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdvancedAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxAddToInvoice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPayingAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBalanceAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxAddToAdvance))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbxAddToAdvance, cbxAddToInvoice, jLabel4, jLabel5, jLabel7, jLabel8, txtAdvancedAmount, txtBalanceAmount, txtInvoiceAmount, txtPayingAmount});

        btnPrintAllInvoice.setBackground(new java.awt.Color(150, 255, 150));
        btnPrintAllInvoice.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnPrintAllInvoice.setText("Print All Invoice");
        btnPrintAllInvoice.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnPrintAllInvoice.setContentAreaFilled(false);
        btnPrintAllInvoice.setOpaque(true);
        btnPrintAllInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnPrintAllInvoiceMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnPrintAllInvoiceMouseExited(evt);
            }
        });
        btnPrintAllInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintAllInvoiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnPrintAllInvoice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrintAllInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        Session session = HibernateUtil.getSessionFactory().openSession();
        this.loadAccounts(session);
        session.close();

        AutoCompletion.enable(cmbAccount, btnLoad);

        getRootPane().setBorder(BorderFactory.createLineBorder(SystemData.BORDER_COLOR, 2));

        tblInhandCheques.setEnabled(false);
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnLoadMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnLoadMouseEntered

    private void btnLoadMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnLoadMouseExited

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        this.loadTransactions();
    }//GEN-LAST:event_btnLoadActionPerformed

    private void tblInvoicesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInvoicesMouseReleased
        int selectedRow = tblInvoices.getSelectedRow();
        if (selectedRow != -1) {
            this.setInvoiceSelected();

            if (rbtCheque.isSelected()) {
                this.setInvoiceSelection();
                this.txtInvoiceAmount.setText("0.0");
            }
            float payingTotalAmount = Float.parseFloat(txtInvoiceAmount.getText());
            DefaultTableModel tableModel = (DefaultTableModel) tblInvoices.getModel();
            boolean checked = (boolean) tableModel.getValueAt(selectedRow, 5);
            if (checked) {
                double selectedtAmount = (double) tableModel.getValueAt(selectedRow, 4);
                payingTotalAmount += selectedtAmount;
                txtInvoiceAmount.setText("" + payingTotalAmount);
            } else {
                double selectedtAmount = (double) tableModel.getValueAt(selectedRow, 4);
                payingTotalAmount -= selectedtAmount;
                txtInvoiceAmount.setText("" + payingTotalAmount);
            }

            if (!this.invoiceSelected) {
                txtBalanceAmount.setText("0.0");
            } else {
                this.calculateBalance();
            }
        }
    }//GEN-LAST:event_tblInvoicesMouseReleased

    private void btnCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCloseMouseEntered

    private void btnCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCloseMouseExited

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSettleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettleMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnSettleMouseEntered

    private void btnSettleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettleMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnSettleMouseExited

    private void btnSettleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettleActionPerformed
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        if (this.validateInvoiceTable()) {
            Date date = new Date();

            float remainingAmount = Float.parseFloat(txtPayingAmount.getText().trim());
            for (int i = 0; i < tblInvoices.getRowCount(); i++) {
                boolean checked = (boolean) tblInvoices.getValueAt(i, 5);
                if (checked) {
                    String invoiceNumber = (String) tblInvoices.getValueAt(i, 0);
                    double invoiceAmount = (double) tblInvoices.getValueAt(i, 4);

                    KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                    String paymentCode = keyCodeFunctions.getKey("PAY", "Payments");

                    PaymentType paymentType = new PaymentType("PTY1000");

                    Invoice invoice = (Invoice) session
                            .createCriteria(Invoice.class)
                            .add(Restrictions.eq("invoiceNumber", invoiceNumber))
                            .uniqueResult();

                    Sale sale = (Sale) session.load(Sale.class, invoice.getSale().getSaleCode());
                    Payment payment = new Payment(paymentCode, invoice, paymentType);

                    float payingAmount;

                    if (remainingAmount >= invoiceAmount) {
                        payment.setAmount((float) invoiceAmount);
                        SaleStatus saleStatus = (SaleStatus) session
                                .createCriteria(SaleStatus.class)
                                .add(Restrictions.eq("statusDescription", "PAID"))
                                .uniqueResult();
                        sale.setSaleStatus(saleStatus);
                        payingAmount = (float) invoiceAmount;
                    } else {
                        payment.setAmount(remainingAmount);
                        SaleStatus saleStatus = (SaleStatus) session
                                .createCriteria(SaleStatus.class)
                                .add(Restrictions.eq("statusDescription", "PARTIALLY PAID"))
                                .uniqueResult();
                        sale.setSaleStatus(saleStatus);
                        payingAmount = remainingAmount;
                    }

                    payment.setCreatedDate(date);
                    payment.setCreatedTime(date);
                    payment.setCreatedUser(MainFrame.user.getUserId());

                    session.saveOrUpdate(payment);

                    session.saveOrUpdate(sale);

                    Account debitAccount = (Account) session
                            .createCriteria(Account.class)
                            .add(Restrictions.eq("accountCode", "ACC1002"))
                            .uniqueResult();

                    Account creditAccount = (Account) session
                            .createCriteria(Account.class)
                            .add(Restrictions.eq("accountCode", cmbAccount.getSelectedItem().toString().split("-")[1].trim()))
                            .uniqueResult();

                    PostAccounts accountPosting = new PostAccounts();
                    accountPosting.cashDebitPosting(debitAccount, invoice, "Cash settlemnt for " + sale.getSaleCode(), payingAmount);
                    accountPosting.cashCreditPosting(creditAccount, invoice, "Cash settlemnt for " + sale.getSaleCode(), payingAmount);

                    remainingAmount = remainingAmount - (float) invoiceAmount;
                }
            }

            if (remainingAmount > 0 && cbxAddToAdvance.isSelected()) {
                Account businessPartnerAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", cmbAccount.getSelectedItem().toString().split("-")[1].trim()))
                        .uniqueResult();

                Account debitAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1002"))
                        .uniqueResult();

                Account creditAccount = (Account) session
                        .createCriteria(Account.class)
                        .add(Restrictions.eq("accountCode", "ACC1005"))
                        .uniqueResult();

                PostAccounts accountPosting = new PostAccounts();
                accountPosting.generalDebitPosting(debitAccount, businessPartnerAccount.getBusinessPartner(), remainingAmount, "Advance paid by " + businessPartnerAccount.getDescription());
                accountPosting.generalCreditPosting(creditAccount, businessPartnerAccount.getBusinessPartner(), remainingAmount, "Advance paid by " + businessPartnerAccount.getDescription());
            }
        }

        transaction.commit();
        session.close();

        this.loadTransactions();
        this.cbxAddToAdvance.setSelected(false);
    }//GEN-LAST:event_btnSettleActionPerformed

    private void txtPayingAmountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPayingAmountKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            tblInvoices.requestFocus();
        }
    }//GEN-LAST:event_txtPayingAmountKeyPressed

    private void txtPayingAmountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPayingAmountFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtPayingAmount.selectAll();
            }
        });
    }//GEN-LAST:event_txtPayingAmountFocusGained

    private void txtPayingAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPayingAmountFocusLost
        this.calculateBalance();
    }//GEN-LAST:event_txtPayingAmountFocusLost

    private void btnResetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnResetMouseEntered

    private void btnResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnResetMouseExited

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.clearAll();
    }//GEN-LAST:event_btnResetActionPerformed

    private void tblInhandChequesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInhandChequesMouseReleased
        int selectedRow = tblInhandCheques.getSelectedRow();
        if (selectedRow != -1) {
            this.setChequeSelected();

            float payingAmount = Float.parseFloat(txtPayingAmount.getText());
            DefaultTableModel tableModel = (DefaultTableModel) tblInhandCheques.getModel();
            boolean checked = (boolean) tableModel.getValueAt(selectedRow, 4);
            if (checked) {
                float chequeAmount = (float) tableModel.getValueAt(selectedRow, 3);
                txtPayingAmount.setText("" + (payingAmount + chequeAmount));

                if (this.chequeSelected && this.invoiceSelected) {
                    this.calculateBalance();
                }
            } else {
                float chequeAmount = (float) tableModel.getValueAt(selectedRow, 3);
                txtPayingAmount.setText("" + (payingAmount - chequeAmount));
                if (this.chequeSelected && this.invoiceSelected) {
                    this.calculateBalance();
                }
            }

            if (!this.chequeSelected) {
                txtBalanceAmount.setText("0.0");
            }
        }
    }//GEN-LAST:event_tblInhandChequesMouseReleased

    private void cbxAddToInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAddToInvoiceActionPerformed
        if (cbxAddToInvoice.isSelected()) {
            float payingAmount = Float.parseFloat(txtPayingAmount.getText());
            float remainingAmount = Float.parseFloat(txtBalanceAmount.getText());
            float advanceAmount = Float.parseFloat(txtAdvancedAmount.getText());

            txtPayingAmount.setText("" + (payingAmount + advanceAmount));
            txtBalanceAmount.setText("" + (remainingAmount + advanceAmount));
        } else {
            float payingAmount = Float.parseFloat(txtPayingAmount.getText());
            float remainingAmount = Float.parseFloat(txtBalanceAmount.getText());
            float advanceAmount = Float.parseFloat(txtAdvancedAmount.getText());

            txtPayingAmount.setText("" + (payingAmount - advanceAmount));
            txtBalanceAmount.setText("" + (remainingAmount - advanceAmount));
        }

        txtPayingAmount.requestFocus();
    }//GEN-LAST:event_cbxAddToInvoiceActionPerformed

    private void btnPrintAllInvoiceMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPrintAllInvoiceMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnPrintAllInvoiceMouseEntered

    private void btnPrintAllInvoiceMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPrintAllInvoiceMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnPrintAllInvoiceMouseExited

    private void btnPrintAllInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintAllInvoiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPrintAllInvoiceActionPerformed

    private void rbtCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtCashActionPerformed
        if (rbtCash.isSelected()) {
            tblInhandCheques.setEnabled(false);
            this.resetInvoiceSelection();
            this.resetInhandChequeSelection();
            this.resetFields();
        }
    }//GEN-LAST:event_rbtCashActionPerformed

    private void rbtChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtChequeActionPerformed
        if (rbtCheque.isSelected()) {
            tblInhandCheques.setEnabled(true);
            this.resetInvoiceSelection();
            this.resetInhandChequeSelection();
            this.resetFields();
        }
    }//GEN-LAST:event_rbtChequeActionPerformed

    private void calculateBalance() {
        float invoiceAmount = Float.parseFloat(txtInvoiceAmount.getText().trim());
        float payingAmount = Float.parseFloat(txtPayingAmount.getText().trim());

        if (payingAmount > 0.0f) {
            float balanceAmount = payingAmount - invoiceAmount;
            txtBalanceAmount.setText("" + balanceAmount);
        }
    }

    private void loadAccounts(Session session) {
        SubAccount subAccount = (SubAccount) session
                .createCriteria(SubAccount.class)
                .add(Restrictions.eq("code", "SAC1002"))
                .uniqueResult();

        List<Account> accounts = session
                .createCriteria(Account.class)
                .add(Restrictions.eq("subAccount", subAccount))
                .addOrder(Order.asc("description"))
                .list();

        if (!accounts.isEmpty()) {
            cmbAccount.removeAllItems();
            cmbAccount.addItem("");
            for (Account account : accounts) {
                cmbAccount.addItem(account.getDescription() + " - " + account.getAccountCode());
            }
        }
    }

    private void loadTransactions() {
        String selectedItem = cmbAccount.getSelectedItem().toString();
        if (!selectedItem.isEmpty()) {
            Session session = HibernateUtil.getSessionFactory().openSession();

            Account account = (Account) session
                    .createCriteria(Account.class)
                    .add(Restrictions.eq("accountCode", selectedItem.split("-")[1].trim()))
                    .uniqueResult();

            BusinessPartner businessPartner = (BusinessPartner) session.load(BusinessPartner.class, account.getBusinessPartner().getBusinessPartnerCode());

            List<AccountPosting> accountPostings = session
                    .createCriteria(AccountPosting.class)
                    .add(Restrictions.eq("businessPartner", businessPartner))
                    .add(Restrictions.eq("account", session.load(Account.class, "ACC1006")))
                    .list();
            if (!accountPostings.isEmpty()) {
                DefaultTableModel tableModel = (DefaultTableModel) tblInhandCheques.getModel();
                tableModel.setRowCount(0);

                for (AccountPosting accountPosting : accountPostings) {
                    String chequeNumber = accountPosting.getChequeNumber();
                    String givenDate = SystemData.DATE_FORMAT.format(accountPosting.getCreatedDate());
                    String chequeDate = SystemData.DATE_FORMAT.format(accountPosting.getChequeDate());
                    float amount = accountPosting.getCredit();

                    tableModel.addRow(new Object[]{chequeNumber, givenDate, chequeDate, amount, false});
                }
            }

            accountPostings = session
                    .createCriteria(AccountPosting.class)
                    .add(Restrictions.eq("businessPartner", businessPartner))
                    .add(Restrictions.eq("account", session.load(Account.class, "ACC1005")))
                    .list();

            if (!accountPostings.isEmpty()) {
                float total = 0.0f;
                for (AccountPosting accountPosting : accountPostings) {
                    float amount = accountPosting.getCredit();
                    total += amount;
                }

                txtAdvancedAmount.setText("" + total);
            }

            Criteria saleCriteria = session.createCriteria(Sale.class);
            Disjunction or = Restrictions.disjunction();
            or.add(Restrictions.eq("saleStatus", session.load(SaleStatus.class, 4)));
            or.add(Restrictions.eq("saleStatus", session.load(SaleStatus.class, 5)));
            saleCriteria.add(Restrictions.eq("businessPartner", account.getBusinessPartner()));
            saleCriteria.add(or);
            saleCriteria.addOrder(Order.desc("saleStatus"));

            List<Sale> sales = saleCriteria.list();

            if (!sales.isEmpty()) {
                DefaultTableModel tableModel = (DefaultTableModel) tblInvoices.getModel();
                tableModel.setRowCount(0);

                float totalAmount = 0.0f;
                for (Sale sale : sales) {
                    Invoice invoice = (Invoice) session
                            .createCriteria(Invoice.class)
                            .add(Restrictions.eq("sale", sale))
                            .uniqueResult();

                    double payment = session
                            .createCriteria(Payment.class)
                            .setProjection(Projections.sum("amount"))
                            .add(Restrictions.eq("invoice", invoice))
                            .add(Restrictions.like("paymentCode", "PAY%"))
                            .uniqueResult() == null ? 0.0 : (double) session
                                            .createCriteria(Payment.class)
                                            .setProjection(Projections.sum("amount"))
                                            .add(Restrictions.eq("invoice", invoice))
                                            .add(Restrictions.like("paymentCode", "PAY%"))
                                            .uniqueResult();

                    BigDecimal bigPayment = new BigDecimal(payment);

                    totalAmount += sale.getGrandTotal();
                    tableModel.addRow(new Object[]{invoice.getInvoiceNumber(), sale.getCreatedDate(), sale.getGrandTotal(), bigPayment.floatValue(), sale.getGrandTotal() - payment, false});
                }
                txtTotalInvoices.setText("" + totalAmount);
            } else {
                DefaultTableModel tableModel = (DefaultTableModel) tblInvoices.getModel();
                tableModel.setRowCount(0);

                txtTotalInvoices.setText("0.0");
                txtPayingAmount.setText("0.0");
                txtBalanceAmount.setText("0.0");
                txtInvoiceAmount.setText("0.0");
            }
        } else {
            InformationDialog.showMessageBox("Please select a valid account", "Select", this);
        }
    }

    boolean validateInvoiceTable() {
        for (int i = 0; i < tblInvoices.getRowCount(); i++) {
            boolean checked = (boolean) tblInvoices.getValueAt(i, 5);
            if (checked) {
                return true;
            }
        }
        return false;
    }
    
    boolean validateInhandChequeTable() {
        for (int i = 0; i < tblInhandCheques.getRowCount(); i++) {
            boolean checked = (boolean) tblInhandCheques.getValueAt(i, 5);
            if (checked) {
                return true;
            }
        }
        return false;
    }

    private void setInvoiceSelected() {
        for (int i = 0; i < tblInvoices.getRowCount(); i++) {
            boolean selected = (boolean) tblInvoices.getValueAt(i, 5);
            if (selected) {
                this.invoiceSelected = true;
                return;
            }
        }
        this.invoiceSelected = false;
    }

    private void setInvoiceSelection() {
        int selectedRow = tblInvoices.getSelectedRow();
        for (int i = 0; i < tblInvoices.getRowCount(); i++) {
            if (i != selectedRow) {
                tblInvoices.setValueAt(false, i, 5);
            }
        }
    }

    private void setChequeSelected() {
        for (int i = 0; i < tblInhandCheques.getRowCount(); i++) {
            boolean selected = (boolean) tblInhandCheques.getValueAt(i, 4);
            if (selected) {
                this.chequeSelected = true;
                return;
            }
        }
        this.chequeSelected = false;
    }

    private void clearAll() {
        cmbAccount.setSelectedIndex(0);
        txtTotalInvoices.setText("0.0");
        rbtCash.setSelected(true);
        this.resetTablesFully();
        txtInvoiceAmount.setText("0.0");
        txtPayingAmount.setText("0.0");
        txtBalanceAmount.setText("0.0");
        txtAdvancedAmount.setText("0.0");
        cbxAddToInvoice.setSelected(false);
        cbxAddToAdvance.setSelected(false);

        cmbAccount.requestFocus();
    }

    private void resetTablesFully() {
        ((DefaultTableModel) tblInvoices.getModel()).setRowCount(0);
        ((DefaultTableModel) tblInhandCheques.getModel()).setRowCount(0);
    }

    private void resetInvoiceSelection() {
        for (int i = 0; i < tblInvoices.getRowCount(); i++) {
            tblInvoices.setValueAt(false, i, 5);
        }
        tblInvoices.repaint();
    }

    private void resetInhandChequeSelection() {
        for (int i = 0; i < tblInhandCheques.getRowCount(); i++) {
            tblInhandCheques.setValueAt(false, i, 4);
        }
        tblInhandCheques.repaint();
    }

    private void resetFields() {
        txtInvoiceAmount.setText("0.0");
        txtPayingAmount.setText("0.0");
        txtBalanceAmount.setText("0.0");
        cbxAddToInvoice.setSelected(false);
        cbxAddToAdvance.setSelected(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnPrintAllInvoice;
    private javax.swing.JButton btnReset;
    public javax.swing.JButton btnSettle;
    private javax.swing.JCheckBox cbxAddToAdvance;
    private javax.swing.JCheckBox cbxAddToInvoice;
    private javax.swing.JComboBox<String> cmbAccount;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel inhandChequesPanel;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panel;
    private javax.swing.ButtonGroup paymentTypeGroup;
    private javax.swing.JRadioButton rbtCash;
    private javax.swing.JRadioButton rbtCheque;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JTable tblInhandCheques;
    private javax.swing.JTable tblInvoices;
    private javax.swing.JFormattedTextField txtAdvancedAmount;
    private javax.swing.JFormattedTextField txtBalanceAmount;
    private javax.swing.JFormattedTextField txtInvoiceAmount;
    private javax.swing.JFormattedTextField txtPayingAmount;
    private javax.swing.JFormattedTextField txtTotalInvoices;
    // End of variables declaration//GEN-END:variables
    private boolean invoiceSelected = false;
    private boolean chequeSelected = false;
}
