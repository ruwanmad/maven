/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zhub.servicemaster.internalFrames;

import com.zhub.servicemaster.data.SystemData;
import com.zhub.servicemaster.dialogs.ConfirmationDialog;
import com.zhub.servicemaster.dialogs.InformationDialog;
import com.zhub.servicemaster.dialogs.ItemSearchDialog;
import com.zhub.servicemaster.dialogs.SettlementDialog;
import com.zhub.servicemaster.forms.MainFrame;
import com.zhub.servicemaster.guiFunctions.ButtonFunctions;
import com.zhub.servicemaster.keys.KeyCodeFunctions;
import com.zhub.servicemaster.models.Bom;
import com.zhub.servicemaster.models.BomItem;
import com.zhub.servicemaster.models.BusinessPartner;
import com.zhub.servicemaster.models.Invoice;
import com.zhub.servicemaster.models.Item;
import com.zhub.servicemaster.models.Sale;
import com.zhub.servicemaster.models.SaleItem;
import com.zhub.servicemaster.models.SaleItemStatus;
import com.zhub.servicemaster.models.SaleStatus;
import com.zhub.servicemaster.models.SellingPrice;
import com.zhub.servicemaster.models.ServiceBay;
import com.zhub.servicemaster.models.Vehicle;
import com.zhub.servicemaster.utils.HibernateUtil;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author RuwanM
 */
public class DirectSaleFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form ServiceFrame
     *
     */
    public DirectSaleFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        discountGroup = new javax.swing.ButtonGroup();
        tblItemPopup = new javax.swing.JPopupMenu();
        itemDelete = new javax.swing.JMenuItem();
        itemEdit = new javax.swing.JMenuItem();
        mainPanel = new javax.swing.JPanel();
        detailPanel = new javax.swing.JPanel();
        itemPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JFormattedTextField();
        rbtPercentage = new javax.swing.JRadioButton();
        rbtNumber = new javax.swing.JRadioButton();
        btnAdd = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JFormattedTextField();
        txtItemName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtItemSearchKey = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        btnSettle = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnItemSearch = new javax.swing.JButton();
        btnNewSale = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtGrandSubTotal = new javax.swing.JFormattedTextField();
        txtGrandDiscount = new javax.swing.JFormattedTextField();
        txtGrandTotal = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        cmbBusinessPartner = new javax.swing.JComboBox<>();

        itemDelete.setText("Delete");
        itemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDeleteActionPerformed(evt);
            }
        });
        tblItemPopup.add(itemDelete);

        itemEdit.setText("Edit");
        itemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEditActionPerformed(evt);
            }
        });
        tblItemPopup.add(itemEdit);

        setClosable(true);
        setTitle("Sale");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        detailPanel.setLayout(new java.awt.GridLayout(1, 0));

        itemPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)), "Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel8.setText("Item Name :");

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel9.setText("Quantity :");

        txtQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        txtQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtQuantity.setText("0.0");
        txtQuantity.setToolTipText("");
        txtQuantity.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtQuantity.setNextFocusableComponent(txtGrandDiscount);
        txtQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQuantityFocusGained(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQuantityKeyPressed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel10.setText("Discount :");

        txtDiscount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        txtDiscount.setText("0.0");
        txtDiscount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtDiscount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDiscountFocusGained(evt);
            }
        });
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDiscountKeyPressed(evt);
            }
        });

        discountGroup.add(rbtPercentage);
        rbtPercentage.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rbtPercentage.setSelected(true);
        rbtPercentage.setText("%");
        rbtPercentage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbtPercentageKeyPressed(evt);
            }
        });

        discountGroup.add(rbtNumber);
        rbtNumber.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        rbtNumber.setText("#");
        rbtNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rbtNumberKeyPressed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(150, 255, 150));
        btnAdd.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnAdd.setContentAreaFilled(false);
        btnAdd.setOpaque(true);
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddMouseExited(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel15.setText("Unit Price");

        txtUnitPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.0"))));
        txtUnitPrice.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtUnitPrice.setText("0.0");
        txtUnitPrice.setToolTipText("");
        txtUnitPrice.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtUnitPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUnitPriceFocusGained(evt);
            }
        });
        txtUnitPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUnitPriceKeyPressed(evt);
            }
        });

        txtItemName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel11.setText("Item Code :");

        txtItemSearchKey.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtItemSearchKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemSearchKeyKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout itemPanelLayout = new javax.swing.GroupLayout(itemPanel);
        itemPanel.setLayout(itemPanelLayout);
        itemPanelLayout.setHorizontalGroup(
            itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtItemSearchKey, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rbtPercentage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        itemPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel10, jLabel8, jLabel9});

        itemPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtDiscount, txtQuantity});

        itemPanelLayout.setVerticalGroup(
            itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemPanelLayout.createSequentialGroup()
                .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(txtUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(itemPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rbtPercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rbtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtItemSearchKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );

        itemPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel10, jLabel8, jLabel9, txtDiscount, txtItemName, txtItemSearchKey, txtQuantity});

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Quantity", "Unit Price", "Sub Total", "Discount", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblItems);
        if (tblItems.getColumnModel().getColumnCount() > 0) {
            tblItems.getColumnModel().getColumn(0).setResizable(false);
            tblItems.getColumnModel().getColumn(1).setResizable(false);
            tblItems.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblItems.getColumnModel().getColumn(2).setResizable(false);
            tblItems.getColumnModel().getColumn(3).setResizable(false);
            tblItems.getColumnModel().getColumn(4).setResizable(false);
            tblItems.getColumnModel().getColumn(5).setResizable(false);
            tblItems.getColumnModel().getColumn(6).setResizable(false);
        }

        btnSettle.setBackground(new java.awt.Color(150, 255, 150));
        btnSettle.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnSettle.setText("Settle");
        btnSettle.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnSettle.setContentAreaFilled(false);
        btnSettle.setOpaque(true);
        btnSettle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSettleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSettleMouseExited(evt);
            }
        });
        btnSettle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettleActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(150, 255, 150));
        btnClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnClose.setContentAreaFilled(false);
        btnClose.setOpaque(true);
        btnClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCloseMouseExited(evt);
            }
        });
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(150, 255, 150));
        btnReset.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnReset.setContentAreaFilled(false);
        btnReset.setOpaque(true);
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnResetMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnResetMouseExited(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnItemSearch.setBackground(new java.awt.Color(150, 255, 150));
        btnItemSearch.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnItemSearch.setText("Search (F2)");
        btnItemSearch.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnItemSearch.setContentAreaFilled(false);
        btnItemSearch.setOpaque(true);
        btnItemSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnItemSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnItemSearchMouseExited(evt);
            }
        });

        btnNewSale.setBackground(new java.awt.Color(150, 255, 150));
        btnNewSale.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnNewSale.setText("New");
        btnNewSale.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnNewSale.setContentAreaFilled(false);
        btnNewSale.setOpaque(true);
        btnNewSale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnNewSaleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnNewSaleMouseExited(evt);
            }
        });
        btnNewSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewSaleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnItemSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewSale, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        buttonPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClose, btnItemSearch, btnNewSale, btnReset, btnSettle});

        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnItemSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewSale, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnClose, btnItemSearch, btnNewSale, btnReset, btnSettle});

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("Sub Total :");

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Discount :");

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setText("Grand Total :");

        txtGrandSubTotal.setEditable(false);
        txtGrandSubTotal.setBackground(new java.awt.Color(255, 255, 255));
        txtGrandSubTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtGrandSubTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtGrandSubTotal.setText("0.00");
        txtGrandSubTotal.setToolTipText("");
        txtGrandSubTotal.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtGrandSubTotal.setNextFocusableComponent(txtGrandDiscount);

        txtGrandDiscount.setEditable(false);
        txtGrandDiscount.setBackground(new java.awt.Color(255, 255, 255));
        txtGrandDiscount.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtGrandDiscount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtGrandDiscount.setText("0.00");
        txtGrandDiscount.setToolTipText("");
        txtGrandDiscount.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtGrandDiscount.setNextFocusableComponent(txtGrandDiscount);

        txtGrandTotal.setEditable(false);
        txtGrandTotal.setBackground(new java.awt.Color(255, 255, 255));
        txtGrandTotal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtGrandTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtGrandTotal.setText("0.00");
        txtGrandTotal.setToolTipText("");
        txtGrandTotal.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtGrandTotal.setNextFocusableComponent(txtGrandDiscount);

        jLabel12.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel12.setText("Business Partner :");

        cmbBusinessPartner.setEditable(true);
        cmbBusinessPartner.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(detailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(itemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGrandDiscount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGrandTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbBusinessPartner, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGrandSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtGrandDiscount, txtGrandSubTotal, txtGrandTotal});

        mainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3});

        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(detailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtGrandSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbBusinessPartner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGrandDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGrandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(50, 50, 50)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbBusinessPartner, jLabel1, jLabel12, jLabel2, jLabel3, txtGrandDiscount, txtGrandSubTotal, txtGrandTotal});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbtPercentageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbtPercentageKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT || evt.getKeyCode() == KeyEvent.VK_KP_RIGHT) {
            rbtPercentage.setSelected(false);
            rbtNumber.setSelected(true);
            rbtNumber.requestFocus();
        }
    }//GEN-LAST:event_rbtPercentageKeyPressed

    private void rbtNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rbtNumberKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_KP_LEFT) {
            rbtNumber.setSelected(false);
            rbtPercentage.setSelected(true);
            rbtPercentage.requestFocus();
        }
    }//GEN-LAST:event_rbtNumberKeyPressed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        Session session = HibernateUtil.getSessionFactory().openSession();
        this.loadServiceStatus(session);
        this.loadBusinessPartners(session);
        session.close();

        SearchAction searchAction = new SearchAction(this);
        String searchKey = "Search (F2)";
        btnItemSearch.setAction(searchAction);
        btnItemSearch.setText(searchKey);
        btnItemSearch.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0), searchKey);
        btnItemSearch.getActionMap().put(searchKey, searchAction);

        txtItemSearchKey.requestFocus();
    }//GEN-LAST:event_formInternalFrameOpened

    private void txtQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantityFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtQuantity.selectAll();
            }
        });
    }//GEN-LAST:event_txtQuantityFocusGained

    private void txtQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUnitPrice.requestFocus();
        }
    }//GEN-LAST:event_txtQuantityKeyPressed

    private void tblItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsMouseClicked
        switch (evt.getButton()) {
            case 1:
                if (evt.getClickCount() == 2) {
                    this.ItemEdit();
                }
                break;
            case 3:
                int row = tblItems.rowAtPoint(evt.getPoint());
                int column = tblItems.columnAtPoint(evt.getPoint());
                tblItems.changeSelection(row, column, false, false);
                tblItemPopup.show(evt.getComponent(), evt.getX(), evt.getY());
                break;
            default:
                break;
        }
    }//GEN-LAST:event_tblItemsMouseClicked

    private void txtDiscountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnAdd.requestFocus();
        }
    }//GEN-LAST:event_txtDiscountKeyPressed

    private void itemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEditActionPerformed
        this.ItemEdit();
    }//GEN-LAST:event_itemEditActionPerformed

    private void txtDiscountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiscountFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtDiscount.selectAll();
            }
        });
    }//GEN-LAST:event_txtDiscountFocusGained

    private void itemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDeleteActionPerformed
        int selectedRow = (tblItems.getSelectedRow());
        if (selectedRow == -1) {
            InformationDialog.showMessageBox("Please select a valid item", "Invalid", null);
        } else {
            grandSubTotal = grandSubTotal - (((float) tblItems.getValueAt(tblItems.getSelectedRow(), 2))
                    * ((float) tblItems.getValueAt(tblItems.getSelectedRow(), 3)));
            grandDiscount = grandDiscount - (float) tblItems.getValueAt(tblItems.getSelectedRow(), 5);
            grandTotal = grandSubTotal - grandDiscount;

            txtGrandSubTotal.setText("" + grandSubTotal);
            txtGrandDiscount.setText("" + grandDiscount);
            txtGrandTotal.setText("" + grandTotal);

            DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
            tableModel.removeRow(tblItems.getSelectedRow());
        }
    }//GEN-LAST:event_itemDeleteActionPerformed

    private void btnSettleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettleMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnSettleMouseEntered

    private void btnSettleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettleMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnSettleMouseExited

    private void btnSettleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettleActionPerformed
        if (this.validateServiceItems()) {
            KeyCodeFunctions codeFunctions = new KeyCodeFunctions();
            String serviceCode = codeFunctions.getKey("DRS", "Direct sale");

            String businessPartnerCode = cmbBusinessPartner.getSelectedItem().toString().split("-")[0].trim();

            Date date = new Date();

            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();

            ServiceBay serviceBay = (ServiceBay) session
                    .createCriteria(ServiceBay.class)
                    .add(Restrictions.eq("serviceBayCode", "LOC1001"))
                    .uniqueResult();

            Vehicle vehicle = (Vehicle) session
                    .createCriteria(Vehicle.class)
                    .add(Restrictions.eq("vehicleCode", "VEH1000"))
                    .uniqueResult();

            SaleItemStatus itemStatus = (SaleItemStatus) session
                    .createCriteria(SaleItemStatus.class)
                    .add(Restrictions.eq("itemStatusId", 1))
                    .uniqueResult();

            BusinessPartner businessPartner = (BusinessPartner) session
                    .createCriteria(BusinessPartner.class)
                    .add(Restrictions.eq("businessPartnerCode", businessPartnerCode))
                    .uniqueResult();

            SaleStatus saleStatus = (SaleStatus) session
                    .createCriteria(SaleStatus.class)
                    .add(Restrictions.eq("statusDescription", "SETTLED"))
                    .uniqueResult();

            Sale sale = new Sale();
            sale.setSaleCode(serviceCode);
            sale.setCurrentMilage(0.0f);
            sale.setSubTotal(grandSubTotal);
            sale.setDiscount(grandDiscount);
            sale.setGrandTotal(grandTotal);
            if (grandDiscount > 0.0) {
                sale.setDiscounted(1);
            } else {
                sale.setDiscounted(0);
            }
            sale.setCreatedDate(date);
            sale.setCreatedTime(date);
            sale.setCreatedUser(MainFrame.user.getUserId());
            sale.setServiceBay(serviceBay);
            sale.setVehicle(vehicle);
            sale.setBusinessPartner(businessPartner);
            sale.setSaleStatus(saleStatus);

            session.saveOrUpdate(sale);

            DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String itemName = (String) tblItems.getValueAt(i, 1);
                float quantity = (float) tblItems.getValueAt(i, 2);
                float unitPrice = (float) tblItems.getValueAt(i, 3);
                float subTotal = (float) tblItems.getValueAt(i, 4);
                float discount = (float) tblItems.getValueAt(i, 5);
                float itemTotal = (float) tblItems.getValueAt(i, 6);

                Item item = (Item) session
                        .createCriteria(Item.class)
                        .add(Restrictions.eq("itemName", itemName))
                        .uniqueResult();

                SaleItem saleItem = new SaleItem();
                saleItem.setItem(item);
                saleItem.setSale(sale);
                saleItem.setUnitPrice(unitPrice);
                saleItem.setQuantity(quantity);
                saleItem.setSubTotal(subTotal);
                saleItem.setDiscount(discount);
                saleItem.setTotal(itemTotal);
                saleItem.setSaleItemStatus(itemStatus);
                saleItem.setCreatedDate(date);
                saleItem.setCreatedTime(date);
                saleItem.setCreatedUser(MainFrame.user.getUserId());
                saleItem.setRemark(itemName);

                session.saveOrUpdate(saleItem);
            }

            session.getTransaction().commit();
            session.close();

            Invoice invoice = this.generateInvoice(sale);

            SettlementDialog settlementDialog = new SettlementDialog(null, true, sale, invoice, "CASH");
            settlementDialog.setVisible(true);
        } else {
            InformationDialog.showMessageBox("Plaese add items before save", "Invalid", null);
        }
    }//GEN-LAST:event_btnSettleActionPerformed

    private void btnCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCloseMouseEntered

    private void btnCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCloseMouseExited

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        ConfirmationDialog.showMessageBox("Are you sure?", "Sure", null);
        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnResetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnResetMouseEntered

    private void btnResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnResetMouseExited

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.clearAll();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnAddMouseEntered

    private void btnAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnAddMouseExited

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        float quantity = Float.parseFloat(txtQuantity.getText().trim());
        if (quantity != 0.0) {
            String itemName = txtItemName.getText().split("-")[0].trim();
            String tempItemCode = txtItemName.getText().split("-")[1].trim();
            Session session = HibernateUtil.getSessionFactory().openSession();
            Transaction transaction = session.beginTransaction();
            Item item = (Item) session
                    .createCriteria(Item.class)
                    .add(Restrictions.eq("itemCode", tempItemCode))
                    .uniqueResult();

            if (item.getFromBom()) {
                Bom bom = (Bom) session.createCriteria(Bom.class)
                        .add(Restrictions.eq("item", item))
                        .uniqueResult();

                if (bom == null) {
                    String itemCode = item.getItemCode();
                    float unitPrice = this.getItemSellingPrice(item);
                    float subTotal = quantity * unitPrice;
                    float discount = Float.parseFloat(txtDiscount.getText().trim());
                    float total = 0.0f;
                    if (discount != 0.0) {
                        if (rbtPercentage.isSelected()) {
                            discount = (subTotal * discount) / 100;
                            total = subTotal - discount;
                        } else if (rbtNumber.isSelected()) {
                            total = subTotal - discount;
                        }
                    } else {
                        total = subTotal;
                    }

                    DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
                    tableModel.addRow(new Object[]{itemCode, itemName, quantity, unitPrice, subTotal, discount, total});

                    txtItemSearchKey.setText("");
                    txtItemSearchKey.setForeground(Color.BLACK);
                    txtItemSearchKey.setSelectionColor(Color.BLUE);
                    txtItemName.setText("");
                    txtQuantity.setText("0.0");
                    txtUnitPrice.setText("0.0");
                    txtDiscount.setText("0.0");
                    rbtPercentage.setSelected(true);

                    grandSubTotal += subTotal;
                    grandDiscount += discount;
                    grandTotal += total;

                    txtGrandSubTotal.setText("" + grandSubTotal);
                    txtGrandDiscount.setText("" + grandDiscount);
                    txtGrandTotal.setText("" + grandTotal);
                } else {
                    List<BomItem> bomItems = session.createCriteria(BomItem.class)
                            .add(Restrictions.eq("bom", bom))
                            .addOrder(Order.asc("item.itemCode"))
                            .list();
                    for (BomItem bomItem : bomItems) {
                        Item releventItem = (Item) session.createCriteria(Item.class)
                                .add(Restrictions.eq("itemCode", bomItem.getItem().getItemCode()))
                                .uniqueResult();

                        String itemCode = releventItem.getItemCode();
                        float unitPrice = bomItem.getUnitPrice();
                        quantity = bomItem.getBomItemQuantity();
                        float subTotal = bomItem.getSellingPrice();
                        float discount = Float.parseFloat(txtDiscount.getText().trim());
                        float total = 0.0f;
                        if (discount != 0.0) {
                            if (rbtPercentage.isSelected()) {
                                discount = (subTotal * discount) / 100;
                                total = subTotal - discount;
                            } else if (rbtNumber.isSelected()) {
                                total = subTotal - discount;
                            }
                        } else {
                            total = subTotal;
                        }

                        DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
                        tableModel.addRow(new Object[]{itemCode, releventItem.getItemName(), quantity, unitPrice, subTotal, discount, total});

                        txtItemSearchKey.setText("");
                        txtItemSearchKey.setForeground(Color.BLACK);
                        txtItemSearchKey.setSelectionColor(Color.BLUE);
                        txtItemName.setText("");
                        txtQuantity.setText("0.0");
                        txtUnitPrice.setText("0.0");
                        txtDiscount.setText("0.0");
                        rbtPercentage.setSelected(true);

                        grandSubTotal += subTotal;
                        grandDiscount += discount;
                        grandTotal += total;

                        txtGrandSubTotal.setText("" + grandSubTotal);
                        txtGrandDiscount.setText("" + grandDiscount);
                        txtGrandTotal.setText("" + grandTotal);
                    }
                }
            } else {
                String itemCode = item.getItemCode();
                float unitPrice = Float.parseFloat(txtUnitPrice.getText().trim());
                float subTotal = quantity * unitPrice;
                float discount = Float.parseFloat(txtDiscount.getText().trim());
                float total = 0.0f;
                if (discount != 0.0) {
                    if (rbtPercentage.isSelected()) {
                        discount = (subTotal * discount) / 100;
                        total = subTotal - discount;
                    } else if (rbtNumber.isSelected()) {
                        total = subTotal - discount;
                    }
                } else {
                    total = subTotal;
                }

                DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
                tableModel.addRow(new Object[]{itemCode, itemName, quantity, unitPrice, subTotal, discount, total});

                List<SellingPrice> sellingPrices = session
                        .createCriteria(SellingPrice.class)
                        .add(Restrictions.eq("item", item))
                        .list();

                Date date = new Date();

                if (sellingPrices.isEmpty()) {
                    SellingPrice sellingPrice = new SellingPrice();
                    sellingPrice.setItem(item);
                    sellingPrice.setSellingPrice(unitPrice);
                    sellingPrice.setRemark("Added by system.");
                    sellingPrice.setEffectiveDate(date);
                    sellingPrice.setCreatedDate(date);
                    sellingPrice.setCreatedTime(date);
                    sellingPrice.setCreatedUser(MainFrame.user.getUserId());

                    session.saveOrUpdate(sellingPrice);
                } else {
                    boolean found = false;
                    for (SellingPrice sellingPrice : sellingPrices) {
                        if (sellingPrice.getSellingPrice() > 0.0f) {
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        SellingPrice sellingPrice = new SellingPrice();
                        sellingPrice.setItem(item);
                        sellingPrice.setSellingPrice(unitPrice);
                        sellingPrice.setRemark("Added by system.");
                        sellingPrice.setEffectiveDate(date);
                        sellingPrice.setCreatedDate(date);
                        sellingPrice.setCreatedTime(date);
                        sellingPrice.setCreatedUser(MainFrame.user.getUserId());

                        session.saveOrUpdate(sellingPrice);
                    }
                }

                txtItemSearchKey.setText("");
                txtItemSearchKey.setForeground(Color.BLACK);
                txtItemSearchKey.setSelectionColor(Color.BLUE);
                txtItemName.setText("");
                txtQuantity.setText("0.0");
                txtUnitPrice.setText("0.0");
                txtDiscount.setText("0.0");
                rbtPercentage.setSelected(true);

                grandSubTotal += subTotal;
                grandDiscount += discount;
                grandTotal += total;

                txtGrandSubTotal.setText("" + grandSubTotal);
                txtGrandDiscount.setText("" + grandDiscount);
                txtGrandTotal.setText("" + grandTotal);
            }

            transaction.commit();
            session.close();
        } else {
            JOptionPane.showMessageDialog(this, "Please enter valid quantity.", "Invalid", JOptionPane.INFORMATION_MESSAGE);
            txtQuantity.requestFocus();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnItemSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnItemSearchMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnItemSearchMouseEntered

    private void btnItemSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnItemSearchMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnItemSearchMouseExited

    private void txtUnitPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUnitPriceFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtUnitPrice.selectAll();
            }
        });
    }//GEN-LAST:event_txtUnitPriceFocusGained

    private void txtUnitPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitPriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtDiscount.requestFocus();
        }
    }//GEN-LAST:event_txtUnitPriceKeyPressed

    private void txtItemSearchKeyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemSearchKeyKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String searchKey = txtItemSearchKey.getText().trim();
            if (!searchKey.isEmpty()) {
                Session session = HibernateUtil.getSessionFactory().openSession();

                Item item = (Item) session
                        .createCriteria(Item.class)
                        .add(Restrictions.eq("searchKey", searchKey))
                        .uniqueResult();

                if (item == null) {
                    txtItemSearchKey.setForeground(Color.RED);
                    txtItemSearchKey.selectAll();
                    txtItemSearchKey.setSelectionColor(Color.RED);
                } else {
                    txtItemName.setText(item.getItemName() + " - " + item.getItemCode());
                    txtQuantity.requestFocus();

                    float sellingPrice = this.getItemSellingPrice(item);
                    txtUnitPrice.setText("" + sellingPrice);
                }

                session.close();
            }
        } else {
            Color color = txtItemSearchKey.getForeground();
            if (color == Color.RED) {
                txtItemSearchKey.setForeground(Color.BLACK);
                txtItemSearchKey.setSelectionColor(Color.BLUE);
            }
        }
    }//GEN-LAST:event_txtItemSearchKeyKeyPressed

    private void btnNewSaleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewSaleMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnNewSaleMouseEntered

    private void btnNewSaleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewSaleMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnNewSaleMouseExited

    private void btnNewSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewSaleActionPerformed
        this.clearAll();
    }//GEN-LAST:event_btnNewSaleActionPerformed

    private Invoice generateInvoice(Sale sale) {
        KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
        String invoiceCode = keyCodeFunctions.getKey("INV", "Invoices");
        Date date = new Date();

        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        Invoice invoice = new Invoice(invoiceCode, sale);
        invoice.setCreatedDate(date);
        invoice.setCreatedTime(date);
        invoice.setCreatedUser(MainFrame.user.getUserId());

        session.saveOrUpdate(invoice);

        Set invoices = new HashSet();
        invoices.add(invoice);

        sale.setInvoices(invoices);

        session.saveOrUpdate(sale);

        transaction.commit();
        session.close();

        return invoice;
    }

    private void loadBusinessPartners(Session session) {
        List<BusinessPartner> businessPartners = session
                .createCriteria(BusinessPartner.class)
                .add(Restrictions.eq("isCustomer", true))
                .addOrder(Order.asc("businessPartnerCode"))
                .list();

        if (!businessPartners.isEmpty()) {
            cmbBusinessPartner.removeAllItems();
            for (BusinessPartner businessPartner : businessPartners) {
                cmbBusinessPartner.addItem(businessPartner.getBusinessPartnerCode() + " - " + businessPartner.getFirstName() + " " + businessPartner.getLastName());
            }
        }
    }

    private void loadServiceStatus(Session session) {
        List<SaleStatus> saleStatuses = session
                .createCriteria(SaleStatus.class)
                .addOrder(Order.asc("statusId"))
                .list();

        if (!saleStatuses.isEmpty()) {
            saleStatusMap.clear();
            for (SaleStatus saleStatus : saleStatuses) {
                String description = saleStatus.getStatusDescription();
                saleStatusMap.put(description, saleStatus);
            }
        }
    }

    private void clearAll() {
        txtItemSearchKey.setText("");
        txtItemSearchKey.setForeground(Color.BLACK);
        txtItemSearchKey.setSelectionColor(Color.BLUE);
        txtItemName.setText("");
        txtQuantity.setText("0.00");
        txtDiscount.setText("0.00");
        rbtPercentage.setSelected(true);

        DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
        tableModel.setRowCount(0);
    }

    private float getItemSellingPrice(Item item) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List<SellingPrice> todaySellingPrices = session
                .createCriteria(SellingPrice.class)
                .add(Restrictions.eq("item", item))
                .add(Restrictions.eq("effectiveDate", new Date()))
                .addOrder(Order.desc("createdTime"))
                .list();

        if (todaySellingPrices.isEmpty()) {
            List<SellingPrice> sellingPrices = session
                    .createCriteria(SellingPrice.class)
                    .add(Restrictions.eq("item", item))
                    .add(Restrictions.le("effectiveDate", new Date()))
                    .addOrder(Order.desc("effectiveDate"))
                    .addOrder(Order.desc("createdTime"))
                    .list();
            if (sellingPrices.isEmpty()) {
                session.close();
                return 0.0f;
            } else {
                for (SellingPrice sellingPrice : sellingPrices) {
                    session.close();
                    return sellingPrice.getSellingPrice();
                }
            }
        } else {
            for (SellingPrice todaySellingPrice : todaySellingPrices) {
                session.close();
                return todaySellingPrice.getSellingPrice();
            }
        }
        return 0.0f;
    }

    private void ItemEdit() {
        int row = tblItems.getSelectedRow();
        if (row != -1) {
            String itemCode = (String) tblItems.getValueAt(row, 0);
            String itemName = (String) tblItems.getValueAt(row, 1);
            float quantity = (Float) tblItems.getValueAt(row, 2);
            float unitPrice = (Float) tblItems.getValueAt(row, 3);
            float discount = (Float) tblItems.getValueAt(row, 5);

            txtItemName.setText(itemName + " - " + itemCode);
            txtQuantity.setText("" + quantity);
            txtUnitPrice.setText("" + unitPrice);
            txtDiscount.setText("0.0");

            DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
            tableModel.removeRow(row);

            float totalItemAmount = unitPrice * quantity;
            grandSubTotal = grandSubTotal - totalItemAmount;
            grandDiscount = grandDiscount - discount;
            grandTotal = grandSubTotal - grandDiscount;

            txtGrandSubTotal.setText("" + grandSubTotal);
            txtGrandDiscount.setText("" + grandDiscount);
            txtGrandTotal.setText("" + grandTotal);

            txtQuantity.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid item.", "Invalid", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    boolean validateServiceItems() {
        DefaultTableModel tableModel = (DefaultTableModel) tblItems.getModel();
        return tableModel.getRowCount() > 0;
    }

    private class SearchAction extends AbstractAction {

        private final JInternalFrame internalFrame;

        public SearchAction(JInternalFrame internalFrame) {
            this.internalFrame = internalFrame;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            ItemSearchDialog itemSearchDialog = new ItemSearchDialog(null, true, internalFrame);
            itemSearchDialog.setVisible(true);
        }
    };

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnItemSearch;
    private javax.swing.JButton btnNewSale;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSettle;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JComboBox<String> cmbBusinessPartner;
    private javax.swing.JPanel detailPanel;
    private javax.swing.ButtonGroup discountGroup;
    private javax.swing.JMenuItem itemDelete;
    private javax.swing.JMenuItem itemEdit;
    private javax.swing.JPanel itemPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton rbtNumber;
    private javax.swing.JRadioButton rbtPercentage;
    private javax.swing.JPopupMenu tblItemPopup;
    private javax.swing.JTable tblItems;
    private javax.swing.JFormattedTextField txtDiscount;
    private javax.swing.JFormattedTextField txtGrandDiscount;
    private javax.swing.JFormattedTextField txtGrandSubTotal;
    private javax.swing.JFormattedTextField txtGrandTotal;
    public javax.swing.JTextField txtItemName;
    public javax.swing.JTextField txtItemSearchKey;
    public javax.swing.JFormattedTextField txtQuantity;
    public javax.swing.JFormattedTextField txtUnitPrice;
    // End of variables declaration//GEN-END:variables
    private final TreeMap<String, SaleStatus> saleStatusMap = new TreeMap<>();

    private float grandSubTotal = 0.0f;
    private float grandTotal = 0.0f;
    private float grandDiscount = 0.0f;
}
