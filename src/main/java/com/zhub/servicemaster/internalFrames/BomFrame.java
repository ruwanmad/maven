/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zhub.servicemaster.internalFrames;

import com.zhub.servicemaster.data.SystemData;
import com.zhub.servicemaster.dialogs.ConfirmationDialog;
import com.zhub.servicemaster.dialogs.InformationDialog;
import com.zhub.servicemaster.forms.MainFrame;
import com.zhub.servicemaster.functions.AutoCompletion;
import com.zhub.servicemaster.guiFunctions.ButtonFunctions;
import com.zhub.servicemaster.keys.KeyCodeFunctions;
import com.zhub.servicemaster.models.Bom;
import com.zhub.servicemaster.models.BomItem;
import com.zhub.servicemaster.models.Item;
import com.zhub.servicemaster.models.SellingPrice;
import com.zhub.servicemaster.models.Uom;
import com.zhub.servicemaster.utils.HibernateUtil;
import com.zhub.servicemaster.views.BomView;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author RuwanM
 */
public class BomFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form BomFrame
     */
    public BomFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tblAddedItemPopup = new javax.swing.JPopupMenu();
        itemDelete = new javax.swing.JMenuItem();
        itemEdit = new javax.swing.JMenuItem();
        bomItemDetailsPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cmbBomItem = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbUom = new javax.swing.JComboBox<>();
        btnAdd = new javax.swing.JButton();
        txtItemUnitPrice = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        addedItemsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAddedBomItems = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        bomDetailsPanel = new javax.swing.JPanel();
        cmbMainItem = new javax.swing.JComboBox<>();
        txtBomCode = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnCodeSerach = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtRemark = new javax.swing.JTextField();
        cbxIsActive = new javax.swing.JCheckBox();
        txtBomSellingPrice = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();

        itemDelete.setText("Delete");
        itemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemDeleteActionPerformed(evt);
            }
        });
        tblAddedItemPopup.add(itemDelete);

        itemEdit.setText("Edit");
        itemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemEditActionPerformed(evt);
            }
        });
        tblAddedItemPopup.add(itemEdit);

        setClosable(true);
        setTitle("BOM");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        bomItemDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)), "BOM Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setText("Item :");

        cmbBomItem.setEditable(true);
        cmbBomItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbBomItem.setNextFocusableComponent(txtQuantity);
        cmbBomItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBomItemItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setText("Quantity :");

        txtQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txtQuantity.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtQuantity.setNextFocusableComponent(cmbUom);
        txtQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQuantityFocusGained(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQuantityKeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setText("UOM :");

        cmbUom.setEditable(true);
        cmbUom.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbUom.setNextFocusableComponent(btnAdd);

        btnAdd.setBackground(new java.awt.Color(150, 255, 150));
        btnAdd.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnAdd.setContentAreaFilled(false);
        btnAdd.setNextFocusableComponent(cmbBomItem);
        btnAdd.setOpaque(true);
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddMouseExited(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtItemUnitPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtItemUnitPrice.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtItemUnitPrice.setText("0.00");
        txtItemUnitPrice.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtItemUnitPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtItemUnitPriceFocusGained(evt);
            }
        });
        txtItemUnitPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemUnitPriceKeyPressed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel9.setText("Unit Price :");

        javax.swing.GroupLayout bomItemDetailsPanelLayout = new javax.swing.GroupLayout(bomItemDetailsPanel);
        bomItemDetailsPanel.setLayout(bomItemDetailsPanelLayout);
        bomItemDetailsPanelLayout.setHorizontalGroup(
            bomItemDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bomItemDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbBomItem, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbUom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtItemUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        bomItemDetailsPanelLayout.setVerticalGroup(
            bomItemDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bomItemDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bomItemDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bomItemDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtItemUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addGroup(bomItemDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbBomItem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbUom, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        bomItemDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAdd, cmbBomItem, cmbUom, jLabel3, jLabel4, jLabel5, jLabel9, txtItemUnitPrice, txtQuantity});

        addedItemsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)), "Added Items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        tblAddedBomItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Quantity", "UOM", "Unit Price", "Selling Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAddedBomItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAddedBomItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAddedBomItems);
        if (tblAddedBomItems.getColumnModel().getColumnCount() > 0) {
            tblAddedBomItems.getColumnModel().getColumn(0).setResizable(false);
            tblAddedBomItems.getColumnModel().getColumn(1).setResizable(false);
            tblAddedBomItems.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblAddedBomItems.getColumnModel().getColumn(2).setResizable(false);
            tblAddedBomItems.getColumnModel().getColumn(3).setResizable(false);
            tblAddedBomItems.getColumnModel().getColumn(4).setResizable(false);
            tblAddedBomItems.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout addedItemsPanelLayout = new javax.swing.GroupLayout(addedItemsPanel);
        addedItemsPanel.setLayout(addedItemsPanelLayout);
        addedItemsPanelLayout.setHorizontalGroup(
            addedItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        addedItemsPanelLayout.setVerticalGroup(
            addedItemsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addedItemsPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        btnSave.setBackground(new java.awt.Color(150, 255, 150));
        btnSave.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnSave.setText("Save");
        btnSave.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnSave.setContentAreaFilled(false);
        btnSave.setOpaque(true);
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMouseExited(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(150, 255, 150));
        btnClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnClose.setContentAreaFilled(false);
        btnClose.setOpaque(true);
        btnClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCloseMouseExited(evt);
            }
        });
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(150, 255, 150));
        btnReset.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnReset.setContentAreaFilled(false);
        btnReset.setOpaque(true);
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnResetMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnResetMouseExited(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        bomDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)), "BOM Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        cmbMainItem.setEditable(true);
        cmbMainItem.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cmbMainItem.setNextFocusableComponent(txtRemark);

        txtBomCode.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtBomCode.setNextFocusableComponent(cmbMainItem);

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel7.setText("Remark :");

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("BOM Code :");

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Item :");

        btnCodeSerach.setBackground(new java.awt.Color(150, 255, 150));
        btnCodeSerach.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnCodeSerach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btnCodeSerach.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnCodeSerach.setContentAreaFilled(false);
        btnCodeSerach.setOpaque(true);
        btnCodeSerach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCodeSerachMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCodeSerachMouseExited(evt);
            }
        });
        btnCodeSerach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodeSerachActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel6.setText("Active :");

        txtRemark.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtRemark.setNextFocusableComponent(cbxIsActive);

        cbxIsActive.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxIsActive.setSelected(true);
        cbxIsActive.setNextFocusableComponent(cmbBomItem);

        txtBomSellingPrice.setEditable(false);
        txtBomSellingPrice.setBackground(new java.awt.Color(255, 255, 255));
        txtBomSellingPrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        txtBomSellingPrice.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtBomSellingPrice.setText("0.00");
        txtBomSellingPrice.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel8.setText("Selling Price :");

        javax.swing.GroupLayout bomDetailsPanelLayout = new javax.swing.GroupLayout(bomDetailsPanel);
        bomDetailsPanel.setLayout(bomDetailsPanelLayout);
        bomDetailsPanelLayout.setHorizontalGroup(
            bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bomDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bomDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(4, 4, 4)
                        .addComponent(cbxIsActive)
                        .addGap(267, 267, 267))
                    .addGroup(bomDetailsPanelLayout.createSequentialGroup()
                        .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bomDetailsPanelLayout.createSequentialGroup()
                                .addComponent(txtBomCode, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(btnCodeSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbMainItem, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bomDetailsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBomSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bomDetailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel6, jLabel7});

        bomDetailsPanelLayout.setVerticalGroup(
            bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bomDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtBomCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(btnCodeSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtBomSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMainItem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bomDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbxIsActive))
                .addContainerGap())
        );

        bomDetailsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cbxIsActive, cmbMainItem, jLabel1, jLabel2, jLabel6, jLabel7, jLabel8, txtBomCode, txtBomSellingPrice, txtRemark});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addedItemsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bomItemDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(bomDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClose, btnReset, btnSave});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bomDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bomItemDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addedItemsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnClose, btnReset, btnSave});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public boolean validateInputs() {
        return !(((String) cmbMainItem.getSelectedItem()).isEmpty()
                || tblAddedBomItems.getModel().getRowCount() == 0);
    }

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        AutoCompletion.enable(cmbMainItem, txtRemark);
        AutoCompletion.enable(cmbBomItem, txtQuantity);
        AutoCompletion.enable(cmbUom, txtItemUnitPrice);

        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        loadItems(session);
        loadUom(session);

        transaction.commit();
        session.close();
    }//GEN-LAST:event_formInternalFrameOpened

    private void txtQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbUom.requestFocus();
        }
    }//GEN-LAST:event_txtQuantityKeyPressed

    private void txtQuantityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantityFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtQuantity.selectAll();
            }
        });
    }//GEN-LAST:event_txtQuantityFocusGained

    private void itemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemEditActionPerformed
        int selectedRow = tblAddedBomItems.getSelectedRow();
        if (selectedRow == -1) {
            InformationDialog.showMessageBox("Please select a valid item", "Invalid", this);
        } else {
            String itemName = tblAddedBomItems.getValueAt(selectedRow, 1).toString();
            String quantity = tblAddedBomItems.getValueAt(selectedRow, 2).toString();
            String uom = tblAddedBomItems.getValueAt(selectedRow, 3).toString();
            String selingPrice = tblAddedBomItems.getValueAt(selectedRow, 4).toString();

            this.addedItemMap.remove(itemName);

            cmbBomItem.setSelectedItem(itemName);
            txtQuantity.setText(quantity);
            cmbUom.setSelectedItem(uom);
            txtItemUnitPrice.setText(selingPrice);

            float sellingPrice = Float.parseFloat(selingPrice);

            grandTotal -= sellingPrice;
            txtBomSellingPrice.setText("" + grandTotal);

            ((DefaultTableModel) tblAddedBomItems.getModel()).removeRow(selectedRow);

            txtQuantity.requestFocus();
        }
    }//GEN-LAST:event_itemEditActionPerformed

    private void tblAddedBomItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAddedBomItemsMouseClicked
        if (evt.getButton() == 3) {
            int row = tblAddedBomItems.rowAtPoint(evt.getPoint());
            int column = tblAddedBomItems.columnAtPoint(evt.getPoint());
            tblAddedBomItems.changeSelection(row, column, false, false);
            tblAddedItemPopup.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblAddedBomItemsMouseClicked

    private void itemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemDeleteActionPerformed
        int selectedRow = tblAddedBomItems.getSelectedRow();
        if (selectedRow == -1) {
            InformationDialog.showMessageBox("Please select a valid item", "Invalid", this);
        } else {
            float sellingPrice = Float.parseFloat(tblAddedBomItems.getValueAt(selectedRow, 5).toString());
            String itemName = tblAddedBomItems.getValueAt(selectedRow, 1).toString().trim();

            this.addedItemMap.remove(itemName);

            grandTotal -= sellingPrice;
            txtBomSellingPrice.setText("" + grandTotal);

            ((DefaultTableModel) tblAddedBomItems.getModel()).removeRow(selectedRow);
        }
    }//GEN-LAST:event_itemDeleteActionPerformed

    private void btnAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnAddMouseEntered

    private void btnAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnAddMouseExited

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String strItemName = ((String) cmbBomItem.getSelectedItem()).split("-")[0].trim();
        String strItemCode = ((String) cmbBomItem.getSelectedItem()).split("-")[1].trim();
        String strQuantity = txtQuantity.getText().trim();
        String strUom = ((String) cmbUom.getSelectedItem()).trim();
        String strUnitPrice = txtItemUnitPrice.getText().trim();

        if (strItemName.isEmpty() || strQuantity.isEmpty() || strUom.isEmpty() || strUnitPrice.isEmpty()) {
            InformationDialog.showMessageBox("Please enter valid details", "Invalid", this);
        } else {

            if (this.addedItemMap.containsKey(strItemCode)) {
                InformationDialog.showMessageBox("This item is already added to current BOM", "Already Added", this);
            } else {
                float fQuantity = Float.parseFloat(strQuantity);
                float fUnitPaice = Float.parseFloat(strUnitPrice);

                float fSellingPricec = fQuantity * fUnitPaice;

                DefaultTableModel tableModel = (DefaultTableModel) tblAddedBomItems.getModel();
                Item item = itemMap.get(strItemCode);
                tableModel.addRow(new Object[]{strItemCode, strItemName, strQuantity, strUom, fUnitPaice, fSellingPricec});

                BomItem bomItem = new BomItem();
                bomItem.setItem(item);
                bomItem.setBomItemQuantity(fQuantity);
                bomItem.setSellingPrice(fSellingPricec);
                bomItem.setUnitPrice(fUnitPaice);

                this.addedItemMap.put(strItemCode, bomItem);

                grandTotal += fSellingPricec;
                txtBomSellingPrice.setText("" + grandTotal);
            }
            cmbBomItem.setSelectedIndex(0);
            txtQuantity.setText("");
            cmbUom.setSelectedIndex(0);
            txtItemUnitPrice.setText("0.00");
            cmbBomItem.requestFocus();
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnSaveMouseEntered

    private void btnSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnSaveMouseExited

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (this.validateInputs()) {
            if (txtBomCode.getText().isEmpty()) {
                Item item = itemMap.get((String) cmbMainItem.getSelectedItem());
                List boms = this.getBomByItem(item, false);
                if (boms.isEmpty()) {
                    ConfirmationDialog.showMessageBox("BOM not exist. Create new one?", "New", this);
                    if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
                        KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                        this.saveOrUpdateBom(keyCodeFunctions.getKey("BOM", "Bill of metirial codes"), false);
                    }
                } else {
                    InformationDialog.showMessageBox("BOM already exists for selected itme", "Exist", this);
                }
            } else {
                List boms = this.getBomByCode(txtBomCode.getText().trim(), false);
                if (boms.isEmpty()) {
                    InformationDialog.showMessageBox("Invalid BOM code. Please try again", "Invalid", this);
                } else {
                    for (Object object : boms) {
                        if (object instanceof Bom) {
                            this.saveOrUpdateBom(((Bom) object).getBomCode(), false);
                        }
                    }
                }
            }
        } else {
            InformationDialog.showMessageBox("Please enter valid details", "Invalid", this);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCloseMouseEntered

    private void btnCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCloseMouseExited

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        ConfirmationDialog.showMessageBox("Are you sure?", "Sure", this);
        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnResetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnResetMouseEntered

    private void btnResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnResetMouseExited

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.clearAll();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCodeSerachMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCodeSerachMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCodeSerachMouseEntered

    private void btnCodeSerachMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCodeSerachMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCodeSerachMouseExited

    private void btnCodeSerachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodeSerachActionPerformed
        String bomCode = txtBomCode.getText().trim();
        List boms = this.getBomByCode(bomCode, true);

        if (!boms.isEmpty()) {
            BomView bomView = new BomView(boms, this);
            MainFrame.desktopPane.add(bomView);
            bomView.setVisible(true);
        }
    }//GEN-LAST:event_btnCodeSerachActionPerformed

    private void txtItemUnitPriceFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemUnitPriceFocusGained
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                txtItemUnitPrice.selectAll();
            }
        });
    }//GEN-LAST:event_txtItemUnitPriceFocusGained

    private void txtItemUnitPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemUnitPriceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnAdd.requestFocus();
        }
    }//GEN-LAST:event_txtItemUnitPriceKeyPressed

    private void cmbBomItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBomItemItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (cmbBomItem.getSelectedIndex() != 0) {
                String itemCode = cmbBomItem.getSelectedItem().toString().split("-")[1].trim();
                if (itemMap.containsKey(itemCode)) {
                    Item item = itemMap.get(itemCode);
                    txtItemUnitPrice.setText("" + this.getItemSellingPrice(item));
                }
            }
        }
    }//GEN-LAST:event_cmbBomItemItemStateChanged

    private void loadItems(Session session) {
        cmbMainItem.removeAllItems();
        cmbMainItem.addItem("");
        cmbBomItem.removeAllItems();
        cmbBomItem.addItem("");

        List<Item> items = session
                .createCriteria(Item.class)
                .addOrder(Order.asc("itemName"))
                .list();

        if (!items.isEmpty()) {
            for (Item item : items) {
                String itemName = item.getItemName();
                String itemCode = item.getItemCode();
                cmbMainItem.addItem(itemName + " - " + itemCode);
                cmbBomItem.addItem(itemName + " - " + itemCode);
                itemMap.put(itemCode, item);
            }
        }
    }

    private void loadUom(Session session) {
        cmbUom.removeAllItems();
        cmbUom.addItem("");
        Query query = session.createQuery("from Uom u order by u.uomSymble");
        List list = query.list();
        if (!list.isEmpty()) {
            for (Object object : list) {
                if (object instanceof Uom) {
                    Uom uom = (Uom) object;
                    String uomSymble = uom.getUomSymble();
                    cmbUom.addItem(uomSymble);
                    uomMap.put(uomSymble, uom);
                }
            }
        }
    }

    public void setBomCode(String bomCode) {
        this.txtBomCode.setText(bomCode);
    }

    public void setBomSellingPrice(float bomSellingPrice) {
        this.txtBomSellingPrice.setText("" + bomSellingPrice);
        this.grandTotal = bomSellingPrice;
    }

    public void setMainItem(String item) {
        this.cmbMainItem.setSelectedItem(item);
    }

    public void setRemark(String remark) {
        this.txtRemark.setText(remark);
    }

    public void setIsActive(boolean isActive) {
        this.cbxIsActive.setSelected(isActive);
    }

    public void setAddedItems(List<BomItem> bomItems) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        if (!bomItems.isEmpty()) {
            DefaultTableModel tableModel = (DefaultTableModel) tblAddedBomItems.getModel();
            tableModel.setRowCount(0);
            for (BomItem bomItem : bomItems) {
                Item item = (Item) session.createCriteria(Item.class)
                        .add(Restrictions.eq("itemCode", bomItem.getItem().getItemCode()))
                        .uniqueResult();

                Uom uom = (Uom) session.createCriteria(Uom.class)
                        .add(Restrictions.eq("uomCode", bomItem.getUom().getUomCode()))
                        .uniqueResult();
                tableModel.addRow(new Object[]{item.getItemCode(),
                    item.getItemName(),
                    bomItem.getBomItemQuantity(),
                    uom.getUomSymble(),
                    bomItem.getUnitPrice(),
                    bomItem.getSellingPrice()});
            }
        }
    }

    public void setBomCodeEditable(boolean editable) {
        this.txtBomCode.setEditable(editable);
    }

    public void setMainItemEditable(boolean editable) {
        this.cmbMainItem.setEnabled(editable);
    }

    public void setBtnSaveText(String text) {
        this.btnSave.setText(text);
    }

    private List getBomByCode(String bomCode, boolean like) {
        if (like) {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Criteria likeCriteria = session.createCriteria(Bom.class);
            likeCriteria.add(Restrictions.like("bomCode", "%" + bomCode + "%"));
            List likeList = likeCriteria.list();
            session.getTransaction().commit();
            session.close();
            return likeList;
        } else {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Criteria equalCriteria = session.createCriteria(Bom.class);
            equalCriteria.add(Restrictions.eq("bomCode", bomCode));
            List equalList = equalCriteria.list();
            session.getTransaction().commit();
            session.close();
            return equalList;
        }
    }

    private List getBomByItem(Item item, boolean like) {
        if (like) {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Criteria likeCriteria = session.createCriteria(Bom.class);
            likeCriteria.add(Restrictions.like("item", item));
            List likeList = likeCriteria.list();
            session.getTransaction().commit();
            session.close();
            return likeList;
        } else {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Criteria equalCriteria = session.createCriteria(Bom.class);
            equalCriteria.add(Restrictions.eq("item", item));
            List equalList = equalCriteria.list();
            session.getTransaction().commit();
            session.close();
            return equalList;
        }
    }

    public void saveOrUpdateBom(String strBomCode, boolean bUpdate) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        Date date = new Date();

        Bom bom = new Bom();
        bom.setBomCode(strBomCode);
        bom.setBomName((String) cmbMainItem.getSelectedItem());
        bom.setSellingPrice(Float.parseFloat(txtBomSellingPrice.getText().trim()));
        bom.setRemark(txtRemark.getText().toUpperCase().trim());
        bom.setIsActive(cbxIsActive.isSelected() ? 1 : 0);
        bom.setItem(itemMap.get((String) cmbMainItem.getSelectedItem()));

        if (bUpdate) {
            bom.setModifiedDate(date);
            bom.setModifiedTime(date);
            bom.setModifiedUser(MainFrame.user.getUserId());
        } else {
            bom.setCreatedDate(date);
            bom.setCreatedTime(date);
            bom.setCreatedUser(MainFrame.user.getUserId());
        }

        session.saveOrUpdate(bom);

        SellingPrice sellingPrice = new SellingPrice();
        sellingPrice.setItem(itemMap.get((String) cmbMainItem.getSelectedItem()));
        sellingPrice.setEffectiveDate(date);
        sellingPrice.setSellingPrice(Float.parseFloat(txtBomSellingPrice.getText().trim()));
        sellingPrice.setCreatedDate(date);
        sellingPrice.setCreatedTime(date);
        sellingPrice.setCreatedUser(MainFrame.user.getUserId());

        session.saveOrUpdate(sellingPrice);

        Set bomItems = bom.getBomItems();

        if (bomItems.isEmpty()) {
            DefaultTableModel tableModel = (DefaultTableModel) tblAddedBomItems.getModel();
            KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();

            for (int i = 0; i < tableModel.getRowCount(); i++) {
                BomItem bomItem = this.addedItemMap.get((String) tableModel.getValueAt(i, 1));
                bomItem.setBom(bom);
                bomItem.setBomItemCode(keyCodeFunctions.getKey("BOI", "Bill of metirial item code"));
                bomItem.setItem(itemMap.get((String) tableModel.getValueAt(i, 1)));
                bomItem.setBomItemQuantity(Float.parseFloat(tableModel.getValueAt(i, 2).toString()));
                bomItem.setUnitPrice(Float.parseFloat(tableModel.getValueAt(i, 4).toString()));
                bomItem.setSellingPrice(Float.parseFloat(tableModel.getValueAt(i, 5).toString()));
                bomItem.setRemark("");
                bomItem.setUom(uomMap.get((String) tableModel.getValueAt(i, 3)));

                if (bUpdate) {
                    bomItem.setModifiedDate(date);
                    bomItem.setModifiedTime(date);
                    bomItem.setModifiedUser(MainFrame.user.getUserId());
                } else {
                    bomItem.setCreatedDate(date);
                    bomItem.setCreatedTime(date);
                    bomItem.setCreatedUser(MainFrame.user.getUserId());
                }

                session.saveOrUpdate(bomItem);
            }
        }

        transaction.commit();
        session.close();

        if (bUpdate) {
            InformationDialog.showMessageBox("Successfully updated", "Success", this);
        } else {
            InformationDialog.showMessageBox("New entry created successfully", "Success", this);
        }
        this.clearAll();
    }

    private float getItemSellingPrice(Item item) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List<SellingPrice> todaySellingPrices = session
                .createCriteria(SellingPrice.class)
                .add(Restrictions.eq("item", item))
                .add(Restrictions.eq("effectiveDate", new Date()))
                .addOrder(Order.desc("createdTime"))
                .list();

        if (todaySellingPrices.isEmpty()) {
            List<SellingPrice> sellingPrices = session
                    .createCriteria(SellingPrice.class)
                    .add(Restrictions.eq("item", item))
                    .add(Restrictions.le("effectiveDate", new Date()))
                    .addOrder(Order.desc("effectiveDate"))
                    .addOrder(Order.desc("createdTime"))
                    .list();
            if (sellingPrices.isEmpty()) {
                session.close();
                return 0.0f;
            } else {
                for (SellingPrice sellingPrice : sellingPrices) {
                    session.close();
                    return sellingPrice.getSellingPrice();
                }
            }
        } else {
            for (SellingPrice todaySellingPrice : todaySellingPrices) {
                session.close();
                return todaySellingPrice.getSellingPrice();
            }
        }
        return 0.0f;
    }

    public void clearAll() {
        txtBomCode.setText("");
        cmbMainItem.setSelectedIndex(0);
        txtRemark.setText("");
        cbxIsActive.setSelected(true);
        cmbBomItem.setSelectedIndex(0);
        txtQuantity.setText("");
        cmbUom.setSelectedIndex(0);
        ((DefaultTableModel) tblAddedBomItems.getModel()).setRowCount(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addedItemsPanel;
    private javax.swing.JPanel bomDetailsPanel;
    private javax.swing.JPanel bomItemDetailsPanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnCodeSerach;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox cbxIsActive;
    private javax.swing.JComboBox<String> cmbBomItem;
    private javax.swing.JComboBox<String> cmbMainItem;
    private javax.swing.JComboBox<String> cmbUom;
    private javax.swing.JMenuItem itemDelete;
    private javax.swing.JMenuItem itemEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAddedBomItems;
    private javax.swing.JPopupMenu tblAddedItemPopup;
    private javax.swing.JTextField txtBomCode;
    private javax.swing.JFormattedTextField txtBomSellingPrice;
    private javax.swing.JFormattedTextField txtItemUnitPrice;
    private javax.swing.JFormattedTextField txtQuantity;
    private javax.swing.JTextField txtRemark;
    // End of variables declaration//GEN-END:variables
    private final TreeMap<String, Item> itemMap = new TreeMap<>();
    private final TreeMap<String, Uom> uomMap = new TreeMap<>();
    private final TreeMap<String, BomItem> addedItemMap = new TreeMap<>();
    float grandTotal = 0.0f;
}
