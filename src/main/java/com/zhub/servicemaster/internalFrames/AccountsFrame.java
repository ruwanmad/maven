/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.zhub.servicemaster.internalFrames;

import com.zhub.servicemaster.data.SystemData;
import com.zhub.servicemaster.dialogs.ConfirmationDialog;
import com.zhub.servicemaster.dialogs.InformationDialog;
import com.zhub.servicemaster.forms.MainFrame;
import com.zhub.servicemaster.functions.AutoCompletion;
import com.zhub.servicemaster.guiFunctions.ButtonFunctions;
import com.zhub.servicemaster.keys.KeyCodeFunctions;
import com.zhub.servicemaster.models.Account;
import com.zhub.servicemaster.models.BusinessPartner;
import com.zhub.servicemaster.models.SubAccount;
import com.zhub.servicemaster.utils.HibernateUtil;
import com.zhub.servicemaster.views.AccountView;
import java.util.Date;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author RuwanM
 */
public class AccountsFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form AccountsFrame
     */
    public AccountsFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtAccountCode = new javax.swing.JTextField();
        txtAccountName = new javax.swing.JTextField();
        btnCodeSerach = new javax.swing.JButton();
        btnNameSearch = new javax.swing.JButton();
        cmbAccountType = new javax.swing.JComboBox<>();
        cmbBusinessPartner = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbxIsActive = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        txtRemark = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        setClosable(true);
        setTitle("Accounts");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel1.setText("Account Code :");

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel2.setText("Account Name :");

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel3.setText("Account Type :");

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel4.setText("Business Partner :");

        txtAccountCode.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtAccountCode.setNextFocusableComponent(txtAccountName);

        txtAccountName.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtAccountName.setNextFocusableComponent(cmbAccountType);

        btnCodeSerach.setBackground(new java.awt.Color(150, 255, 150));
        btnCodeSerach.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnCodeSerach.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btnCodeSerach.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnCodeSerach.setContentAreaFilled(false);
        btnCodeSerach.setOpaque(true);
        btnCodeSerach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCodeSerachMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCodeSerachMouseExited(evt);
            }
        });
        btnCodeSerach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCodeSerachActionPerformed(evt);
            }
        });

        btnNameSearch.setBackground(new java.awt.Color(150, 255, 150));
        btnNameSearch.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnNameSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btnNameSearch.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnNameSearch.setContentAreaFilled(false);
        btnNameSearch.setOpaque(true);
        btnNameSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnNameSearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnNameSearchMouseExited(evt);
            }
        });
        btnNameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNameSearchActionPerformed(evt);
            }
        });

        cmbAccountType.setEditable(true);
        cmbAccountType.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        cmbBusinessPartner.setEditable(true);
        cmbBusinessPartner.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel5.setText("Is Active :");

        cbxIsActive.setSelected(true);
        cbxIsActive.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cbxIsActiveFocusGained(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jLabel6.setText("Remark :");

        txtRemark.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        btnReset.setBackground(new java.awt.Color(150, 255, 150));
        btnReset.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnReset.setContentAreaFilled(false);
        btnReset.setOpaque(true);
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnResetMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnResetMouseExited(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(150, 255, 150));
        btnSave.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnSave.setText("Save");
        btnSave.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnSave.setContentAreaFilled(false);
        btnSave.setOpaque(true);
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMouseExited(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnClose.setBackground(new java.awt.Color(150, 255, 150));
        btnClose.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnClose.setText("Close");
        btnClose.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(50, 255, 50)));
        btnClose.setContentAreaFilled(false);
        btnClose.setOpaque(true);
        btnClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCloseMouseExited(evt);
            }
        });
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbAccountType, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbBusinessPartner, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxIsActive))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAccountCode, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(btnCodeSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAccountName, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(btnNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAccountCode, txtAccountName});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbAccountType, cmbBusinessPartner, txtRemark});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtAccountCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCodeSerach, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtAccountName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnNameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbAccountType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBusinessPartner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxIsActive))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRemark, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCodeSerach, btnNameSearch, cbxIsActive, cmbAccountType, cmbBusinessPartner, jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, txtAccountCode, txtAccountName, txtRemark});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCodeSerachMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCodeSerachMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCodeSerachMouseEntered

    private void btnCodeSerachMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCodeSerachMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCodeSerachMouseExited

    private void btnCodeSerachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCodeSerachActionPerformed
        String accountCode = txtAccountCode.getText().trim();
        List<Account> accounts = getAccountByCode(accountCode, true);

        if (!accounts.isEmpty()) {
            AccountView accountView = new AccountView(accounts, this);
            MainFrame.desktopPane.add(accountView);
            accountView.setVisible(true);
        }
    }//GEN-LAST:event_btnCodeSerachActionPerformed

    private void btnNameSearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNameSearchMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnNameSearchMouseEntered

    private void btnNameSearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNameSearchMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnNameSearchMouseExited

    private void btnNameSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNameSearchActionPerformed
        String itemName = txtAccountName.getText().trim();
        List<Account> accounts = getAccountByName(itemName, true);

        if (accounts.size() > 0) {
            AccountView accountView = new AccountView(accounts, this);
            MainFrame.desktopPane.add(accountView);
            accountView.setVisible(true);
        }
    }//GEN-LAST:event_btnNameSearchActionPerformed

    private void btnResetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnResetMouseEntered

    private void btnResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnResetMouseExited

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        this.clearAll();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnSaveMouseEntered

    private void btnSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnSaveMouseExited

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (!verifyInputs()) {
            InformationDialog.showMessageBox("Fill the required fields", "Transaction Incomplete", this);
        } else {
            try {
                if (txtAccountCode.getText().trim().toUpperCase().isEmpty()) {
                    List<Account> accounts = this.getAccountByName(txtAccountName.getText().trim().toUpperCase(), false);
                    if (!accounts.isEmpty()) {
                        InformationDialog.showMessageBox("Account name already exists.", "Exist", this);
                    } else {
                        KeyCodeFunctions keyCodeFunctions = new KeyCodeFunctions();
                        this.createOrUpdateAccount(keyCodeFunctions.getKey("ACC", "Account codes"), false);
                    }
                } else {
                    List<Account> accounts = this.getAccountByCode(txtAccountCode.getText().trim().toUpperCase(), false);
                    if (accounts.isEmpty()) {
                        InformationDialog.showMessageBox("Invalid account code. Please try again", "Invalid", this);
                    } else {
                        ConfirmationDialog.showMessageBox("Do you want to update?", "Update", this);
                        if (ConfirmationDialog.option == ConfirmationDialog.YES_OPTION) {
                            this.createOrUpdateAccount(txtAccountCode.getText().trim().toUpperCase(), true);
                        }
                    }
                }
            } catch (Exception e) {
                InformationDialog.showMessageBox("Invalid entry. Retry again", "Transaction Status", this);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCloseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseEntered
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_ENTER_COLOR);
    }//GEN-LAST:event_btnCloseMouseEntered

    private void btnCloseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseExited
        ButtonFunctions.changeBackgroundColor(evt.getSource(), SystemData.MOUSE_EXIT_COLOR);
    }//GEN-LAST:event_btnCloseMouseExited

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        Session session = HibernateUtil.getSessionFactory().openSession();

        List<SubAccount> subAccounts = session
                .createCriteria(SubAccount.class)
                .addOrder(Order.asc("description"))
                .list();

        if (!subAccounts.isEmpty()) {
            cmbAccountType.removeAllItems();
            cmbAccountType.addItem("");
            for (SubAccount subAccount : subAccounts) {
                cmbAccountType.addItem(subAccount.getDescription());
            }
        }

        List<BusinessPartner> businessPartners = session
                .createCriteria(BusinessPartner.class)
                .addOrder(Order.asc("firstName"))
                .addOrder(Order.asc("lastName"))
                .list();

        if (!businessPartners.isEmpty()) {
            cmbBusinessPartner.removeAllItems();
            cmbBusinessPartner.addItem("");
            for (BusinessPartner businessPartner : businessPartners) {
                cmbBusinessPartner.addItem(businessPartner.getFirstName() + " " + businessPartner.getLastName());
            }
        }

        session.close();

        AutoCompletion.enable(cmbAccountType, cmbBusinessPartner);
        AutoCompletion.enable(cmbBusinessPartner, cbxIsActive);
    }//GEN-LAST:event_formInternalFrameOpened

    private void cbxIsActiveFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbxIsActiveFocusGained
        if (this.cmbBusinessPartner.getSelectedIndex() != 0) {
            this.txtAccountName.setText(cmbBusinessPartner.getSelectedItem().toString());
        }
    }//GEN-LAST:event_cbxIsActiveFocusGained

    private List<Account> getAccountByCode(String accountCode, boolean like) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        if (like) {
            List<Account> accounts = session
                    .createCriteria(Account.class)
                    .add(Restrictions.like("accountCode", "%" + accountCode + "%"))
                    .addOrder(Order.asc("accountCode"))
                    .list();
            session.close();
            return accounts;
        } else {
            Criteria accountCriteria = session.createCriteria(Account.class);
            accountCriteria.add(Restrictions.like("", ""));

            List<Account> accounts = session
                    .createCriteria(Account.class)
                    .add(Restrictions.eq("accountCode", accountCode))
                    .addOrder(Order.asc("accountCode"))
                    .list();
            session.close();
            return accounts;
        }
    }

    private List<Account> getAccountByName(String accountName, boolean like) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        if (like) {
            Criteria accountCriteria = session.createCriteria(Account.class);
            accountCriteria.add(Restrictions.like("", ""));

            List<Account> accounts = session
                    .createCriteria(Account.class)
                    .add(Restrictions.like("description", "%" + accountName + "%"))
                    .addOrder(Order.asc("accountCode"))
                    .list();
            session.close();
            return accounts;
        } else {
            Criteria accountCriteria = session.createCriteria(Account.class);
            accountCriteria.add(Restrictions.like("", ""));

            List<Account> accounts = session
                    .createCriteria(Account.class)
                    .add(Restrictions.eq("description", accountName))
                    .addOrder(Order.asc("accountCode"))
                    .list();
            session.close();
            return accounts;
        }
    }

    public void setAccountCode(String accountCode) {
        this.txtAccountCode.setText(accountCode);
    }

    public void setAccountName(String accountName) {
        this.txtAccountName.setText(accountName);
    }

    public void setAccountType(String accountType) {
        this.cmbAccountType.setSelectedItem(accountType);
    }

    public void setBusinessPatner(String businessPartner) {
        this.cmbBusinessPartner.setSelectedItem(businessPartner);
    }

    public void setIsActive(boolean isActive) {
        this.cbxIsActive.setSelected(isActive);
    }

    public void setRemark(String remark) {
        this.txtRemark.setText(remark);
    }

    public void setAccountCodeEditable(boolean editable) {
        this.txtAccountCode.setEditable(editable);
    }

    public void setBtnSaveText(String text) {
        this.btnSave.setText(text);
    }

    private boolean verifyInputs() {
        return !(txtAccountName.getText().isEmpty()
                || (cmbAccountType.getSelectedIndex() == 0));
    }

    private void clearAll() {
        this.txtAccountCode.setText("");
        this.txtAccountName.setText("");
        this.cmbAccountType.setSelectedIndex(0);
        this.cmbBusinessPartner.setSelectedIndex(0);
        this.cbxIsActive.setSelected(true);
        this.txtRemark.setText("");

        this.setAccountCodeEditable(true);
        this.btnSave.setText("Save");
    }

    private void createOrUpdateAccount(String strAccountCode, boolean bUpdate) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = session.beginTransaction();

        Date date = new Date();

        SubAccount subAccount = (SubAccount) session
                .createCriteria(SubAccount.class)
                .add(Restrictions.eq("description", cmbAccountType.getSelectedItem().toString().trim()))
                .uniqueResult();

        Account account = new Account();
        account.setAccountCode(strAccountCode);
        account.setDescription(txtAccountName.getText().trim().toUpperCase());
        account.setSubAccount(subAccount);

        if (!cmbBusinessPartner.getSelectedItem().toString().isEmpty()) {
            BusinessPartner businessPartner = (BusinessPartner) session
                    .createCriteria(BusinessPartner.class)
                    .add(Restrictions.eq("firstName", cmbBusinessPartner.getSelectedItem().toString().split(" ")[0].trim()))
                    .add(Restrictions.eq("lastName", cmbBusinessPartner.getSelectedItem().toString().split(" ")[1].trim()))
                    .uniqueResult();
            account.setBusinessPartner(businessPartner);
        }
        account.setIsActive(cbxIsActive.isSelected() ? 1 : 0);
        account.setRemark(txtRemark.getText().trim().toUpperCase());

        if (bUpdate) {
            account.setModifiedDate(date);
            account.setModifiedTime(date);
            account.setModifiedUser(MainFrame.user.getUserId());
        } else {
            account.setCreatedDate(date);
            account.setCreatedTime(date);
            account.setCreatedUser(MainFrame.user.getUserId());
        }

        session.saveOrUpdate(account);

        transaction.commit();
        session.close();

        if (bUpdate) {
            InformationDialog.showMessageBox(SystemData.RECORD_UPDATED_MESSAGE, SystemData.RECORD_UPDATED_HEADING, this);
        } else {
            InformationDialog.showMessageBox(SystemData.NEW_RECORD_ADDED_MESSAGE, SystemData.NEW_RECORD_ADDED_HEADING, this);
        }
        clearAll();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnCodeSerach;
    private javax.swing.JButton btnNameSearch;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox cbxIsActive;
    private javax.swing.JComboBox<String> cmbAccountType;
    private javax.swing.JComboBox<String> cmbBusinessPartner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtAccountCode;
    private javax.swing.JTextField txtAccountName;
    private javax.swing.JTextField txtRemark;
    // End of variables declaration//GEN-END:variables
}
